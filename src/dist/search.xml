<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一章 管理信息系统导论</title>
      <link href="/2023/03/28/education-xinxixitong-1/"/>
      <url>/2023/03/28/education-xinxixitong-1/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#org5f1516c">第一章 管理信息系统导论</a><ol><li><a href="#orga8ebf57">1. 管理信息系统的基本定义</a><ol><li><a href="#org8fe9ef7">定义</a></li><li><a href="#orgb9402b2">人机系统</a></li><li><a href="#org16a74e2">一体化系统</a></li></ol></li><li><a href="#org7ad3054">2. 管理信息系统的分类</a><ol><li><a href="#org1df4254">1. 电子业务系统含义</a></li><li><a href="#org49ee134">2. 电子政务系统含义</a></li><li><a href="#org3996e0f">3. 电子商务系统含义</a></li><li><a href="#org754d966">4. 操作型管理信息系统</a></li><li><a href="#org8d00a55">5. 分析型管理信息系统</a></li><li><a href="#org1a902c3">6. 事务型管理信息系统</a></li><li><a href="#orga3b3210">7. 管理型管理信息系统</a></li><li><a href="#org1905414">8. 战略型管理信息系统</a></li></ol></li><li><a href="#org444f00e">3. 管理信息系统的结构</a><ol><li><a href="#org51fa7d9">1. 功能结构</a></li><li><a href="#org4e6b21b">2. 概念结构</a></li><li><a href="#org672e191">3. 管理职能结构</a></li><li><a href="#orgc0dd1f1">4. 软硬件结构</a></li><li><a href="#org296fe80">5. 网络计算结构</a></li></ol></li><li><a href="#org2073983">4. 管理信息系统的几种典型应用形式</a><ol><li><a href="#org0b5d375">1. MRP基本原理</a></li><li><a href="#orgd8814de">2. MRP II基本原理</a></li><li><a href="#org7d4ea4c">3. ERP基本原理</a></li></ol></li></ol></li></ol><p><a id="org5f1516c"></a></p><h1 id="第一章-管理信息系统导论"><a href="#第一章-管理信息系统导论" class="headerlink" title="第一章 管理信息系统导论"></a>第一章 管理信息系统导论</h1><p><a id="orga8ebf57"></a></p><h2 id="1-管理信息系统的基本定义"><a href="#1-管理信息系统的基本定义" class="headerlink" title="1. 管理信息系统的基本定义"></a>1. 管理信息系统的基本定义</h2><p><a id="org8fe9ef7"></a></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>管理信息系統是一个由人、机组成的能进行管理信息的收集、传递、存储、加工、维护和使用的系统。</p><p><a id="orgb9402b2"></a></p><h3 id="人机系统"><a href="#人机系统" class="headerlink" title="人机系统"></a>人机系统</h3><p>管理信息系统=人+计算机，但是计算机并不一定是管理信息系统的必要条件。</p><p><a id="org16a74e2"></a></p><h3 id="一体化系统"><a href="#一体化系统" class="headerlink" title="一体化系统"></a>一体化系统</h3><p>具有两个含义：数据的一体化、系统开发的一体化</p><p>数据的一体化：数据在物理存储上可以分布存放，但在逻辑上却需要统一的部门、统一的人员集中管理。<br>系统开发的一体化：按总体规划，分布实施的原则。</p><p><a id="org7ad3054"></a></p><h2 id="2-管理信息系统的分类"><a href="#2-管理信息系统的分类" class="headerlink" title="2. 管理信息系统的分类"></a>2. 管理信息系统的分类</h2><ol><li>按核心业务活动可分为电子业务系统、电子政务系统、电子商务系统</li><li>按数据处理方式分为操作性和分析型</li><li>按管理应用层次分为事务型、管理型和战略型</li></ol><p><a id="org1df4254"></a></p><h3 id="1-电子业务系统含义"><a href="#1-电子业务系统含义" class="headerlink" title="1. 电子业务系统含义"></a>1. 电子业务系统含义</h3><p>主要针对一个组织内部的具体业务过程建立的，主要服务于这个组织的内部管理活动。</p><p><a id="org49ee134"></a></p><h3 id="2-电子政务系统含义"><a href="#2-电子政务系统含义" class="headerlink" title="2. 电子政务系统含义"></a>2. 电子政务系统含义</h3><p>主要针对政府部门的政务管理活动和服务职能而建立的，意在促进政府部门管理手段的变革，超越时间、空间和部门分割的制约，全方位地向社会提供优质、规范、透明的服务，其电子化的对象是政务活动中的信息采集、处理和传递活动。<br>政府的主要职能：经济管理、市场监管、社会管理和公共服务。<br>特点：</p><ol><li>使政务工作更有效、更精简;</li><li>使政府工作更公开、更透明；</li><li>为企业和居民提供更好的服务；</li><li>重新构造政府、企业、居民之间的关系，使之比之前更加协调，使企业和居民能更好的参与政府管理；</li></ol><p><a id="org3996e0f"></a></p><h3 id="3-电子商务系统含义"><a href="#3-电子商务系统含义" class="headerlink" title="3. 电子商务系统含义"></a>3. 电子商务系统含义</h3><p>电子商务系统主要针对商贸活动而建立的，主要依托Internet，实现消费者的网上购物、商户之间的网上交易和在线电子支付等活动。<br>电子化对象是商务过程中的信息处理活动。<br>按商务活动参与主体，划分为：企业对企业、企业对消费者、消费者对消费者、企业对政府等若干模式。</p><p><a id="org754d966"></a></p><h3 id="4-操作型管理信息系统"><a href="#4-操作型管理信息系统" class="headerlink" title="4. 操作型管理信息系统"></a>4. 操作型管理信息系统</h3><p>一般是面向具体的管理业务而建立的，功能比较简单，主要包括：数据录入、修改、删除、打印、查找和简单的汇总计算等。<br>通常与分析型管理信息系统合并在一起，作为系统中的子模块或子系统。</p><p><a id="org8d00a55"></a></p><h3 id="5-分析型管理信息系统"><a href="#5-分析型管理信息系统" class="headerlink" title="5. 分析型管理信息系统"></a>5. 分析型管理信息系统</h3><p>主要面向需要进行趋势分析、预测等管理决策需求而建立。通常基于操作型管理信息系统开发。</p><p><a id="org1a902c3"></a></p><h3 id="6-事务型管理信息系统"><a href="#6-事务型管理信息系统" class="headerlink" title="6. 事务型管理信息系统"></a>6. 事务型管理信息系统</h3><p>主要服务于组织基层管理者，主要目的是具体业务过程中的自动化。</p><p><a id="orga3b3210"></a></p><h3 id="7-管理型管理信息系统"><a href="#7-管理型管理信息系统" class="headerlink" title="7. 管理型管理信息系统"></a>7. 管理型管理信息系统</h3><p>主要服务于组织中层管理者，提供综合查询、统计分析和报表、报告等功能，涉及多项业务的综合管理。<br>主要目的是使组织中层管理人员通过固定格式的报表、报告和综合查询、统计分析，了解和监视管理领域运行情况。</p><p><a id="org1905414"></a></p><h3 id="8-战略型管理信息系统"><a href="#8-战略型管理信息系统" class="headerlink" title="8. 战略型管理信息系统"></a>8. 战略型管理信息系统</h3><p>主要服务于组织高层管理者，主要目的为战略计划的制定和调整提供辅助决策功能。</p><p><a id="org444f00e"></a></p><h2 id="3-管理信息系统的结构"><a href="#3-管理信息系统的结构" class="headerlink" title="3. 管理信息系统的结构"></a>3. 管理信息系统的结构</h2><p>主要包括功能结构、概念结构、管理职能结构、软硬件结构和网络计算结构</p><p><a id="org51fa7d9"></a></p><h3 id="1-功能结构"><a href="#1-功能结构" class="headerlink" title="1. 功能结构"></a>1. 功能结构</h3><p>从使用者角度来看，任何一个管理信息系统均有明确的目标，并由若干具体功能组成。为了完成这个目标，各功能相互联系，构成一个有机结合的整体，表现出系统的特征。</p><p><a id="org4e6b21b"></a></p><h3 id="2-概念结构"><a href="#2-概念结构" class="headerlink" title="2. 概念结构"></a>2. 概念结构</h3><p>对各个管理信息系统的功能结构进行抽象，会发现所有的管理信息系统均由信息源、信息处理器、信息用户和信息管理者四大部件组成。<br>四大部件作用：</p><ol><li>信息源是信息产生地；</li><li>信息处理器担负着信息的传输、加工、存储等任务；</li><li>信息用户是信息的最终使用者，他们应用信息进行管理决策；</li><li>信息管理者负责信息系统的设计、实施、维护等工作；</li></ol><p><a id="org672e191"></a></p><h3 id="3-管理职能结构"><a href="#3-管理职能结构" class="headerlink" title="3. 管理职能结构"></a>3. 管理职能结构</h3><p>管理组织一般具有直线制、职能制、矩阵式等组织结构，可从纵向、横向视角进行分析。</p><ol><li><ol><li>纵向视角</li></ol><p>按管理活动从高、中、低三个层次分为：战略决策层、管理控制层、执行控制层。针对三个层次的系统称为战略子系统、管理控制子系统、执行控制子系统，分别属于战略型、管理型和事务型管理信息系统。</p><ol><li>战略计划子系统<br>主要任务：为企业战略计划的制订和调整提供辅助决策功能。<br>数据来源：经过执行控制子系统或管理控制子系统加工处理的，以及企业外部，其中外部数据占比比例较大。<br>特点：很难用简单的过程和程序实现，需要采用模拟和概率模型等方法来近似实现。很大程度上取决于管理者长期积累的丰富经验。</li><li>管理控制子系统<br>主要任务：为企业各职能部门管理人员提供用于衡量企业效益、控制企业生产经营活动、制订企业资源分配方案等活动所需要的信息。<br>数据来源：从执行控制子系统取出信息进行汇总及处理。<br>主要功能：<ol><li>使用计划或预算模型来帮助管理人员编制计划和调整计划与预算执行情况；</li><li>定期生成企业生产经营执行情况的综合报告;</li><li>使用数学方法分析计划执行的偏差情况，并提供最佳或满意的解决方案；</li><li>提供各种查询功能；</li></ol></li><li>执行控制子系统<br>主要任务：确保基层的生产经营活动正常、有效地进行。<br>特点：通常使用预定的过程和决策规则，过程一般很稳定，即决策规则和处理过程都是程序化、结构化的。处理和决策周期都比较短。<br>类型：事务处理、报表处理、查询处理。</li></ol></li><li><ol start="2"><li>横向视角</li></ol><p>管理活动按职能排列的，对于制造业，主要管理可概括为 人、物、财、产、供、销等。按管理职能可分为若干子系统</p><ol><li>生产管理子系统</li><li>销售管理子系统</li><li>物资管理子系统</li><li>财务会计管理子系统</li><li>人力资源管理子系统</li></ol></li><li><ol start="3"><li>综合视角</li></ol><p>纵向和横向相互交叉，即管理层次和职能划分交叉。</p></li></ol><p><a id="orgc0dd1f1"></a></p><h3 id="4-软硬件结构"><a href="#4-软硬件结构" class="headerlink" title="4. 软硬件结构"></a>4. 软硬件结构</h3><ol><li><ol><li>硬件结构</li></ol><p>按计算机在管理信息系统中发挥的作用，可划分为客户机和服务器两大类；<br>服务器划分：</p><ol><li>按规模划分为：超级计算机、大型机、小型机和PC服务器。常见为小型机和PC服务器</li><li>按操作系统划分：Windows、Linux、Unix</li><li>按功能划分：数据库服务器、打印服务器、邮件服务器、Web服务器、J2EE应用服务器、多媒体服务器、FTP服务器、身份认证服务器和电子商务服务器</li></ol></li><li><ol start="2"><li>软件结构</li></ol><p>大体分为应用软件和系统软件。<br>管理信息系统的软件结构主要包括：</p><ol><li>描述管理信息系统应用软件的功能模块；</li><li>依附于硬件结构的管理信息系统的软件结构，主要包括：操作系统、数据库管理系统、应用开发工具和各种服务器软件等。</li></ol></li></ol><p><a id="org296fe80"></a></p><h3 id="5-网络计算结构"><a href="#5-网络计算结构" class="headerlink" title="5. 网络计算结构"></a>5. 网络计算结构</h3><p>大致划分为：中央主机集中分时处理模式、文件服务器模式、客户机/服务器模式、浏览器/服务器模式</p><ol><li><ol><li>客户服务器模式</li></ol><p>交互性强是C/S模式最大优点。</p></li><li><ol start="2"><li>浏览器服务器模式</li></ol></li></ol><p><a id="org2073983"></a></p><h2 id="4-管理信息系统的几种典型应用形式"><a href="#4-管理信息系统的几种典型应用形式" class="headerlink" title="4. 管理信息系统的几种典型应用形式"></a>4. 管理信息系统的几种典型应用形式</h2><p>主要包括物料需求计划系统MRP、制造资源计划系统MRP II和企业资源计划系统ERP</p><p><a id="org0b5d375"></a></p><h3 id="1-MRP基本原理"><a href="#1-MRP基本原理" class="headerlink" title="1. MRP基本原理"></a>1. MRP基本原理</h3><p>是一种以物料需求的计划与控制为主线的管理思想，基于此种管理方法形式的系统被称为MRP系统。<br>以物料需求活动为对象的物料需求管理，是一种安排未来生产的方法，核心是考虑物料与时间和数量之间的关系。</p><p>管理理念主要是：</p><ol><li>供应必须与需求平衡；</li><li>优先级计划原则；</li></ol><p>计算依据：主生产计划（MPS）、物料清单（BPM）、库存信息。<br>主生产计划决定MRP的必要性和可行性。<br>基本任务：从所需求产品的生产计划导出相关物料的需求量和需求时间；根据物料的需求时间和生产周期来确定其开始生产的时间。</p><p><a id="orgd8814de"></a></p><h3 id="2-MRP-II基本原理"><a href="#2-MRP-II基本原理" class="headerlink" title="2. MRP II基本原理"></a>2. MRP II基本原理</h3><p>把制造、财务、销售、采购、工程技术等各个子系统集成为一个一体化系统被成为制造资源计划系统<br>基本思想：把企业作为一个有机的整体，基于企业经营目标制定生产计划，围绕物料集成组织内的各种信息，实现按需、按时进行生产。<br>与MRP的主要区别之一就是运用管理会计的概念。</p><p><a id="org7d4ea4c"></a></p><h3 id="3-ERP基本原理"><a href="#3-ERP基本原理" class="headerlink" title="3. ERP基本原理"></a>3. ERP基本原理</h3><p>ERP是面向供应链管理的，基于时间是ERP的重要特点之一。ERP以顾客驱动、基于时间、面向整个供应链为三个主要特征，以资金、货物、人员和信息为四大元素。<br>ERP是一种企业内部所有业务部门之间以及企业同外部合作伙伴之间交换和分享信息的系统；是集成供应链管理的工具、技术和流程，是管理决策和供应链流程优化不可缺少的手段，有助于实现现代企业的竞争优势。<br>主要功能主要包括：财务管理、物流管理、生产计划与控制管理、人力资源管理等方面。</p><ol><li><ol><li>财务管理</li></ol><p>分为会计核算与财务管理两大块。</p></li><li><ol start="2"><li>物流管理</li></ol><p>主要包括分销管理、库存控制和采购管理。</p></li><li><ol start="3"><li>生产计划与控制管理</li></ol><p>ERP的核心功能，将企业的整个生产过程有机的结合在一起，使得企业能够有效地降低库存，提高效率。<br>主要包括：主生产计划、物料需求计划、能力需求计划、车间控制、制造标准。</p></li><li><ol start="4"><li>人力资源管理</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Education </category>
          
          <category> 信息系统开发与管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自考 </tag>
            
            <tag> 信息系统开发与管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绪论-马克思主义是关于无产阶级和人类解放的科学</title>
      <link href="/2023/03/27/education-makesi-1/"/>
      <url>/2023/03/27/education-makesi-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Education </category>
          
          <category> Makesi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自考 </tag>
            
            <tag> 马克思主义基本原理概论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pets3 Knowledges</title>
      <link href="/2023/03/16/pets3-knowledges/"/>
      <url>/2023/03/16/pets3-knowledges/</url>
      
        <content type="html"><![CDATA[<h1 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h1><ol><li><a href="#org50ca131">语法</a></li><li><a href="#org2657a22">谓语</a></li><li><a href="#org26965cd">动词的分类</a></li><li><a href="#org08e7a0a">介词</a></li><li><a href="#org81cb09d">简单句及谓语</a><ol><li><a href="#org1ed7c3b">概念</a></li></ol></li><li><a href="#orgbcce342">同位语、从句</a></li><li><a href="#org84d2f6c">并列句</a></li><li><a href="#orgf294895">定语</a><ol><li><a href="#org1d2f55b">定语概念</a></li><li><a href="#orgc887c33">练习</a></li><li><a href="#org0abe884">定语高分应用</a></li></ol></li><li><a href="#org5a6563a">状语及其运用　</a><ol><li><a href="#org055b115">概念</a></li></ol></li><li><a href="#org987ed88">状语从句</a><ol><li><a href="#org85c355c">概念</a></li><li><a href="#org20de8d4">练习题</a></li></ol></li><li><a href="#orge1b4e82">五大标点符号</a></li><li><a href="#orgb91d660">句子分析方法</a></li><li><a href="#orgcf447ed">教材</a><ol><li><a href="#orgb8fd0a7">Chapter 1 Unit 1 Dialogue 1</a></li><li><a href="#org30daa05">Chapter 1 Unit 1 Dialogue 2</a></li><li><a href="#org621e6ff">Chapter 1 Unit 1 Dialogue 3</a></li><li><a href="#orgdc35424">Chapter 1 Unit 1 Dialogue 4</a></li><li><a href="#org9180703">Chapter 1 Unit 1 Passage</a></li><li><a href="#orgc1357a9">Chapter 1 Unit 2 Dialogue 1</a></li></ol></li><li><a href="#org590ebd0">作业</a></li><li><a href="#org05f5fe3">听力</a></li></ol><p><a id="org50ca131"></a></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>努力去做某事  尝试去做某事<br>  try to do something. make efforts to do something. 表示努力去做但并未完成。<br>  manage to do 表示努力去做并做成功了。</p><p>尽全力去做某事<br>  try one’s best to do something.<br>  spare no effort to do something.<br>  do one’s utmost to do something </p><p>Can Cloud 等情态动词不能做谓语，必须跟上一个动词做谓语。</p><p>一件事对某人很重要<br>it is important to something.<br>for 表示 形容词很重要 to 表示一件事。<br>play a key role in/ play an important role/part in 在什么中扮演很重要的角色 不可数play需要加s。<br>  信心对成功至关重要  confidence plays a key role in our success.</p><p>形容词可以作表语、定语、名词、宾语补足语（She makes me happy happy为宾语补足语），形容词都是为了服务名词。</p><p>in this respect 在这方面<br>as long as 只要就<br>as soon as 一&amp;#x2026;.旦&amp;#x2026;. 时间状语从句<br>as well as 链接两个 generous as well as humble<br>  I like A and B  表示并列的地位是一样的<br>  I like A as well as B  并列表示重点强调第一位<br>other （两者中）另一个   another（三者或更多）另一个<br>offer sb sth/give sth to sb. 给什么东西给某人。<br>see/hear（听） sb (to )do/doing  do：看到某人做过某事  doing：看见某人正在做某事<br>show sb sth/ show sth to sb 给某人展示某东西<br>this 这个 these 这些<br>of + 名词 = 形容词  of importance = important<br>as quickly as possible 尽可能快的<br>be doing/done (ed)/to do.  正在干；被干啥；准备干 be + 非谓语动词 整体表示谓语<br>be about to do sth 即将做某事<br>would you mind doning/if + 句子。 你介意什么事吗？<br>let/help/make sb (to) do sth 让/帮助某人做某事。 主动省略 to<br>I am afraid of/that 我恐怕什么事。<br>insist on sth 坚持什么事  insist that sb (should) do  某人应该做某事<br>buy sth for sb/buy sb sth 买什么东西给某人<br>have to 后面+动词， 不得不</p><p>Do/Does 单三形式用Does 过去式 did/Does<br>seem v. 似乎 可以作系动词，后面可以加表语、形容词。 You seem beautiful.<br>make attempt to do/ make efforts to do  试图去做某事。<br>was neither&amp;#x2026;nor&amp;#x2026; 既不是什么也不是什么 两者都不<br>do sth oneself/herself. 某人自己做某事<br>be able to = can 能够。 will be able to 将来能够<br>would  will的过去的将来式<br>far from 什么和什么离的很远  My school is far (away) from the park.<br>  A is 2km away from B. away from 表示准确的距离<br>use&amp;#x2026;to do/ use&amp;#x2026; in doing  in doing表示更专业<br>be based on 基于什么的。<br>The key to 关键<br>Take part in/ join in join没有in是加入党派，有in代表一个聚会<br>much/many much修饰不可数 many修饰可数</p><p>第三人称谓语需要加s<br>turn out to be 原来是.<br>some 可以形容不可数也可以形容可数名词。<br>ask sb for something. 问/要某人做什么事<br>[suggest sb doing something/ advise sb to do something] 建议某人做某事<br>the 尽量可数名词前面加。<br>[do sb a favor/ give sb a hand] 帮某人一个小忙。<br> give birth to  生；产生<br> bear some burden 承担一些责任<br> leaving where for where 动身去哪里<br>appeal to sb for something 呼吁某人做某事<br>be shocked 使震惊<br>think of &amp;#x2026; as &amp;#x2026; 把什么当作什么<br>view &amp;#x2026; as &amp;#x2026;. 把什么当作什么<br>see &amp;#x2026; as &amp;#x2026; 把什么当作什么<br>regrad &amp;#x2026; as &amp;#x2026; 把什么当作什么<br>consider &amp;#x2026; as &amp;#x2026; 把什么当作什么<br>have an effect/impact/influence on sb 对某人有影响<br>It takes sb time to do 某人花了时间做了某事。<br>使某人陷入一种沉迷。 set oneself up for.<br>should spare no effort to 竭尽全力做某事<br>look forward to  期待<br>growing up 成长期<br>disagree on a thing 在某件事上有不同意见  disagree with a thing  对某个事件完全不同意<br>bring sb sth  bring sth to sb   带给某人什么东西。<br>in other words  换句话说 </p><p><a id="org2657a22"></a></p><h1 id="谓语"><a href="#谓语" class="headerlink" title="谓语"></a>谓语</h1><p>动词ing形式的不能单独做谓语 to do 不能做谓语</p><p>谓语的语态<br>  主动：主语+谓语+宾语<br>  被动：宾语+be 谓语ed（+ by 主语）<br>  主动：Ming eats an apple<br>  被动：An apple is eaten by Ming.</p><p>be + 动词ing 表示正在</p><p>谓语的时态<br>  be的两种形式主动/被动 doing,done<br>  用do代表动词 - 主动</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="org-left"><col class="org-left"><col class="org-left"><col class="org-left"><col class="org-left"></colgroup><tbody><tr><td class="org-left">时/态</td><td class="org-left">一般</td><td class="org-left">进行</td><td class="org-left">完成</td><td class="org-left">完成进行</td></tr><tr><td class="org-left">现在</td><td class="org-left">do/does</td><td class="org-left">be + doing</td><td class="org-left">have/has done</td><td class="org-left">have been doing</td></tr><tr><td class="org-left">过去</td><td class="org-left">did</td><td class="org-left">was + doing</td><td class="org-left">had done</td><td class="org-left">had been doing</td></tr><tr><td class="org-left">将来</td><td class="org-left">will do</td><td class="org-left">will be doing</td><td class="org-left">will have done</td><td class="org-left">will have been doing</td></tr><tr><td class="org-left">过去将来</td><td class="org-left">would do</td><td class="org-left">would be doing</td><td class="org-left">would have done</td><td class="org-left">would have been doing</td></tr></tbody></table><p>用do代表动词 - 被动</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="org-left"><col class="org-left"><col class="org-left"><col class="org-left"><col class="org-left"></colgroup><tbody><tr><td class="org-left">时/态</td><td class="org-left">一般</td><td class="org-left">进行</td><td class="org-left">完成</td><td class="org-left">完成进行</td></tr><tr><td class="org-left">现在</td><td class="org-left">be done</td><td class="org-left">be being done</td><td class="org-left">have been done</td><td class="org-left">have been being done</td></tr><tr><td class="org-left">过去</td><td class="org-left">was/were done</td><td class="org-left">was/were being done</td><td class="org-left">was/were have been done</td><td class="org-left">was/were have been being done</td></tr><tr><td class="org-left">将来</td><td class="org-left">will be done</td><td class="org-left">will be being done</td><td class="org-left">will have been done</td><td class="org-left">will have been being done</td></tr><tr><td class="org-left">过去将来</td><td class="org-left">would be done</td><td class="org-left">would be being done</td><td class="org-left">would have been done</td><td class="org-left">would have been being done</td></tr></tbody></table><p>Have 表示有的时候不能提前，助动词才能提前  情态动词后面跟动词原形<br>Have/has 后面不能加动词原形</p><p>我看电视。     I watch TV.<br>我在看电视     I am watching TV.<br>我看了电视     I have watched TV.<br>我还在看电视   I have been watching TV.</p><p><a id="org26965cd"></a></p><h1 id="动词的分类"><a href="#动词的分类" class="headerlink" title="动词的分类"></a>动词的分类</h1><p>动词：</p><ol><li><p>实义动词<br>表示具体动作的词。<br>常见的分类：及物动词和不及物动词<br>  及物动词：后面直接加宾语，并且必须加宾语。 比如：I love you. I buy a book.<br>不及物动词：后面不能直接加宾语，必须要加了介词以后才能加宾语。 比如：I agree with you. I live in Beijing.<br>如何区分及物动词和不及物动词？<br>a. 根据意思：<br>   buy   eat<br>b. “动词+介词” 中的动词为不及物动词：<br>   arrive at.   listen to.     look at.<br>c. 看单词记忆：<br>   v.: 既可以作及物动词，也可以作不及物动词。<br>   vt.: 及物动词<br>   vi.: 不及物动词</p></li><li><p>系动词<br>状态：be 动词 are/am/is<br>表象：seem, appear<br>保持：keep, stay, remain, stand<br>感官：look, sound, taste, smell, feel<br>变化：get, become, trun, grow, fall<br>终止：prove</p></li><li><p>情态动词<br>含义：情态动词是本身有一定的词义、表示说话人主观态度的词。<br>用法：情态动词不能单独出现。后面必须和实义动词/系统词（原形）一起构成谓语。<br>分类：</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="org-left"><col class="org-left"><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">情态动词</th><th scope="col" class="org-left">中文</th><th scope="col" class="org-left">同义表达</th><th scope="col" class="org-left">例句</th></tr></thead><tbody><tr><td class="org-left">1 - can</td><td class="org-left">可以，能够</td><td class="org-left">be able to</td><td class="org-left">I can answer this queistion.</td></tr><tr><td class="org-left">1 - could</td><td class="org-left">表“请求”，可通用</td><td class="org-left">be capable of</td><td class="org-left">Could/Can you help me?</td></tr></tbody><tbody><tr><td class="org-left">2 - should</td><td class="org-left">应该</td><td class="org-left">be supposed to</td><td class="org-left">We should respect parents.</td></tr><tr><td class="org-left">2 - ought to</td><td class="org-left">&nbsp;</td><td class="org-left">be obliged to</td><td class="org-left">&nbsp;</td></tr></tbody><tbody><tr><td class="org-left">3 - may</td><td class="org-left">可能，或许</td><td class="org-left">be likely to</td><td class="org-left">He may come back.</td></tr><tr><td class="org-left">3 - might</td><td class="org-left">&nbsp;</td><td class="org-left">&nbsp;</td><td class="org-left">&nbsp;</td></tr></tbody><tbody><tr><td class="org-left">4 - must</td><td class="org-left">必须（客观）</td><td class="org-left">be bound to</td><td class="org-left">They must finish the task.</td></tr><tr><td class="org-left">4 - have to</td><td class="org-left">不得不（主观）</td><td class="org-left">&nbsp;</td><td class="org-left">&nbsp;</td></tr></tbody><tbody><tr><td class="org-left">5 - will/would</td><td class="org-left">将会，打算</td><td class="org-left">intend to</td><td class="org-left">She will find a job.</td></tr></tbody><tbody><tr><td class="org-left">6 - need</td><td class="org-left">需要</td><td class="org-left">/</td><td class="org-left">Children need study hard.</td></tr></tbody><tbody><tr><td class="org-left">7 - dare</td><td class="org-left">胆敢</td><td class="org-left">/</td><td class="org-left">He dare talk back to me.</td></tr></tbody></table><p>情态动词加原形， to后面也加原形。</p></li><li><p>助动词</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="org-left"><col class="org-left"><col class="org-left"><col class="org-left"></colgroup><thead><tr><th scope="col" class="org-left">助动词</th><th scope="col" class="org-left">过去式</th><th scope="col" class="org-left">用法</th><th scope="col" class="org-left">例句</th></tr><tr><th scope="col" class="org-left">be</th><th scope="col" class="org-left">was/were</th><th scope="col" class="org-left">构成进行时</th><th scope="col" class="org-left">I am doing my homework.</th></tr><tr><th scope="col" class="org-left">(am/is/are)</th><th scope="col" class="org-left">&nbsp;</th><th scope="col" class="org-left">构成被动语态</th><th scope="col" class="org-left">He was punished for his late.</th></tr></thead><tbody><tr><td class="org-left">do/does</td><td class="org-left">did</td><td class="org-left">构成否定和疑问</td><td class="org-left">They do not like her.</td></tr><tr><td class="org-left">&nbsp;</td><td class="org-left">&nbsp;</td><td class="org-left">强调谓语动词</td><td class="org-left">They do like him.</td></tr></tbody><tbody><tr><td class="org-left">have/has</td><td class="org-left">had</td><td class="org-left">构成完成时</td><td class="org-left">We have cleaned the house.</td></tr></tbody><tbody><tr><td class="org-left">will</td><td class="org-left">would</td><td class="org-left">构成将来时</td><td class="org-left">The boy will achieve his dream.</td></tr></tbody></table></li></ol><p><a id="org08e7a0a"></a></p><h1 id="介词"><a href="#介词" class="headerlink" title="介词"></a>介词</h1><p>介词不能够单独使用，后面必须加名词、代词、动名词、从句等。其实介词后面就是加名词或名词性从句。<br>具体用哪一个是由句子意思决定的。</p><ol><li><p>分类：时间地点<br>介词：on in at<br>表时间用法：</p><ol><li>具体日期：某年某月某日，星期，节日，特定的某天，具体的某天的早中晚 - on<br>举例：on November 15th, 2021; on Friday; on Children’s day; on that day; on Sunday morning.</li><li>泛指时间：年、月、世纪、四季、早中晚 - in<br>举例：in 2022; in July; in the 21st century; in autumn; in the morning</li><li>注意：“in + 一段时间”表示“在&amp;#x2026;..以后”，用于一般将来时<br>举例：I will finish my work in 2 hours.</li><li>表示具体时刻，或正午 - at<br>举例：at 8 o’clock; at noon</li></ol><p>表地点用法：</p><ol><li>在&amp;#x2026;的上面 - on<br>举例：on the table; on te street.</li><li>在&amp;#x2026;的里面 + 大地点<br>举例：in China; in Shanghai.</li><li>在&amp;#x2026;的里面 + 小地点<br>举例：at home; at the airport.</li></ol></li><li><p>其他表示时间地点<br>before after 可以作引导词，可以接名词、从句<br>for 时间，因为</p><ol><li>before<br>在&amp;#x2026;之前，可以指时间、距离<br>I go running before work.</li><li>after<br>在&amp;#x2026;之后，可以指时间、跟随<br>I do my homework after supper.</li><li>for<br>按时间段（用完成时）<br>I have lived here for 2 years.</li><li>since<br>按过去时间点（用完成时）<br>I have lived here since 1999.</li><li>during<br>在&amp;#x2026;期间<br>He became a soldier during the war.</li><li>until<br>直到，搭配：not&amp;#x2026;until&amp;#x2026;<br>I did not leave until my mom came back.</li></ol></li><li><p>方式</p><ol><li>by (via)<br>a. by + 时间：表示到&amp;#x2026;时候（为止）<br>   I will have worked here for 2 years by next week.<br>   I had learnt 1000 words by last month.<br>b. 用于被动，表示：被<br>   The house was cleaned by my sister.<br>c. 通过&amp;#x2026;的方式<br>   He learns new words by reading books.<br>d. 在&amp;#x2026;旁边<br>   My frather often runs by the lake.<br>e. 表程度、数量<br>   The number of students increases by 50%.<br>f. by + 交通工具<br>   Mary goes to school by bike every day.</li><li>in<br>语言、工具<br>She can introduce herself in Chinese. （她能够用中文介绍她自己）</li><li>on<br>电子类<br>on the radio; on the Internet; on the TV</li></ol></li><li><p>其他介词</p><ol><li>over 在&amp;#x2026;上面（正上方）超过，多于<br>The kite is flying over the tree.<br>His grandfather is over 80.</li><li>under 在&amp;#x2026;下面（正下方）<br>People sit under the tree.</li><li>above 在&amp;#x2026;上面<br>The kite is flying above the tree.</li><li>below 在&amp;#x2026;下面<br>The temperature is below zero.</li><li>beside 在&amp;#x2026;旁边<br>The boy stands beside her mother.</li><li>behind 在&amp;#x2026;后面<br>The girl sits behind her father.</li><li>in front of 在&amp;#x2026;前面（外部）<br>There is a desk in front of the teacher.</li><li>in the front of 在&amp;#x2026;前面（内部）<br>There is a desk in the front of the classroom.</li><li>near 在&amp;#x2026;旁边</li><li>of &amp;#x2026;的<br>the development of modern science.</li><li>beyond 超出<br>The issue is beyond my comprehension.</li><li>like 像<br>Your smile is like a rose.</li></ol></li><li><p>其他介词2</p><ol><li>from 从&amp;#x2026;<br>We work from Monday to Saturday.</li><li>to 向，往，朝，对着<br>I run to the shop.</li><li>between 在（两者）之间<br>The child sleeps between his dad and mother.</li><li>among 在（三者或以上）之间<br>A bee is flying among flowers.</li><li>against 反对；与&amp;#x2026;相反<br>our boss is against out idea.</li><li>including 包含<br>Anyone can answer the question, including you.</li><li>about 关于；大约<br>About this meeting, there are about 10 people.</li><li>concerning 关于<br>He asked a question concerning the salary.</li><li>across 穿过（表面）<br>The man goes across the street.</li><li>through 穿过（内部）/通过<br>The thief climbed through the window.</li><li>as 作为<br>As a father, he has the duty to protect his family.</li></ol></li><li><p>其他介词3</p><ol><li>for<br>由于              Ming is punished for his late.<br>对于              Smoking is bad for you health.<br>作为（和as差不多） This house is decorated for a library.<br>为了 表目的和去向  I come here for you.<br>作连词，表因果。   I like you, for you are brilliant.</li><li>with<br>用               I finish my homework with a pen.<br>和&amp;#x2026;一起         I live with my father.<br>表示“伴随”        I go to school with my bag.<br>由于             with the development of science.</li><li>without<br>没有             I can live without you.</li></ol></li><li><p>介词 - 常见搭配</p><ol><li>as a result  因此、结果</li><li>according to 根据</li><li>on the basis of 根据</li><li>with respect to 关于、就&amp;#x2026;而言</li><li>with the help of 在&amp;#x2026;的帮助下</li><li>at the same time 同时</li><li>in the meantime 同时</li><li>in the morning/afternoon/evening.</li><li>after all 毕竟</li><li>in the face of 面对&amp;#x2026;</li><li>in view of 考虑到&amp;#x2026;/鉴于&amp;#x2026;</li><li>in the case of 至于&amp;#x2026;/就&amp;#x2026;而言</li><li>on behalf of 以&amp;#x2026;的名义</li><li>at the thought of 一想到&amp;#x2026;</li><li>in fact 实际上</li></ol></li></ol><p><a id="org81cb09d"></a></p><h1 id="简单句及谓语"><a href="#简单句及谓语" class="headerlink" title="简单句及谓语"></a>简单句及谓语</h1><p><a id="org1ed7c3b"></a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个英语句子里面应该要有主语谓语，其中谓语是动词充当的，谓语表示主语发出的动作。<br>假如一个句子里面有宾语，那么宾语就是动词的承受者。<br>情态动词不能作谓语，后面需要加动词原形，当没有动词的时候加be(am/is/are)充当动词<br>谓语动词要有时态和语态，单三不能用动词原形，<br>谓语是有一个带时态或语态的动词（实义动词或系动词）充当的，一个句子中有多个动词，除了变成谓语，其他变成非谓语动词，分别是ing(主动), ed(被动), to do（目的或还没有做的动作）。</p><p>一个英语句子中有且只有一个谓语，这个谓语是由带时态和语态的动词（实义动词或系动词）充当的。句子中假如有其他动词需要变成非谓语动词。假如句子中没有动词而需要动词就加be动词  。</p><p>例如：<br>  Finishing your homework is right.<br>  My dream is to become a doctor.<br>  Encouraged by my frather, I pass the examination.<br>  Playing basketball is good for my health.<br>  My plan is to play basketball. be 动词后面加表语</p><p>当主语表达天气、温度、时间时用it，没有主语要表示“有”和地点作主语的时候用 There be 代替。例如：<br>  There is a cat in my room.<br>  There are many childrens liking me.<br>  There are 500 students in this school.</p><p>形容词不能作主语，名词、代词、介词短语、非谓语动词、形容词可以做表语。  </p><p><a id="orgbcce342"></a></p><h1 id="同位语、从句"><a href="#同位语、从句" class="headerlink" title="同位语、从句"></a>同位语、从句</h1><ol><li><p>在一个名词后面加一个逗号并对前一个名词进行解释<br>I like Hong, a girl.</p></li><li><p>从句等于引导词加句子，所有从句都是肯定句存在的形式。<br>从句是陈述句引导词用that<br>从句是一般疑问句用weather （是否）<br>从句时特殊疑问句不需要引导词，因为自带引导词<br>  why how wich when</p></li><li><p>主语从句<br>主语从句为了避免头重脚轻，需要将从句放后面，用 It &amp;#x2026; that &amp;#x2026; 代替<br>例如：<br>  That he won the game is evident -&gt; It is evident that he won the game.<br>替代句子：</p><ol><li>这是我的想法<br>It is my idea.<br>It becomes my belief that.<br>I think that</li><li>众所周知<br>It is widely agreed that.<br>It is generally accepted that.<br>It is universally acknowledged that.</li><li>毋庸置疑<br>It is clear that.<br>It is beyond dispute that.</li></ol><p>这种 It 是一种形式主语</p><p>因为所以<br>  The truth that &amp;#x2026; tells that &amp;#x2026;.<br>  The truth/fact;<br>  The truth/fact/evidence that &amp;#x2026; tells/shows/indicates/manifest that 事实表明&amp;#x2026;</p><p>离开某地去某地<br>Leave A for B.</p></li></ol><p><a id="org84d2f6c"></a></p><h1 id="并列句"><a href="#并列句" class="headerlink" title="并列句"></a>并列句</h1><p>复词前面必须是句号，逗号需要用 and 连接</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="org-left"><col class="org-left"><col class="org-left"></colgroup><tbody><tr><td class="org-left">类型</td><td class="org-left">名词</td><td class="org-left">复词、介词短语</td></tr><tr><td class="org-left">平行</td><td class="org-left">and</td><td class="org-left">at the same time; in the meantime; meanwhile, likewise</td></tr><tr><td class="org-left">转折</td><td class="org-left">but; yet</td><td class="org-left">however; nevertheless; on the contraty; in contrast; unfortunately</td></tr><tr><td class="org-left">因果</td><td class="org-left">for; so</td><td class="org-left">hence; therefore; as a result; thus; as a consequence; consequently</td></tr><tr><td class="org-left">递进</td><td class="org-left">then</td><td class="org-left">in addition; additionally; furthermore; moreover</td></tr><tr><td class="org-left">选择</td><td class="org-left">or</td><td class="org-left">otherwise; alternatively;</td></tr></tbody></table><p><a id="orgf294895"></a></p><h1 id="定语"><a href="#定语" class="headerlink" title="定语"></a>定语</h1><p><a id="org1d2f55b"></a></p><h2 id="定语概念"><a href="#定语概念" class="headerlink" title="定语概念"></a>定语概念</h2><p>定语是用来修饰名词。表示在名词前面，翻译为什么什么的的就是定语。<br>This is a smart boy.<br>smart 为定语<br>This man in read coat is his father.<br>in read coat 为定语</p><p>定语放置规则：<br>前小后大，一个单词放在名词前面，多于一个单词放在名词后面。</p><p>什么可以做定语？<br>形容词、非谓语动词（可以充当任何类型）、名词、介词短语、代词。</p><p>in + 颜色代表穿着什么颜色的。。。</p><p>定语形式：名词（先行词）+ 引导词 + 句子<br>定语从句引导词</p><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="org-left"><col class="org-left"></colgroup><tbody><tr><td class="org-left">人</td><td class="org-left">who; whom; whose</td></tr><tr><td class="org-left">事物</td><td class="org-left">that; which; whose</td></tr><tr><td class="org-left">时间</td><td class="org-left">that; which; when</td></tr><tr><td class="org-left">地点</td><td class="org-left">that; which; where</td></tr><tr><td class="org-left">原因</td><td class="org-left">that; which; why</td></tr></tbody></table><p>定语从句引导词没有what<br>从句完整 when where why whose<br>从句不完整 who whom that which 缺主语用 who 缺宾语用 whom</p><p>当一个名词表示地点也表示事物时，引导词需要看后面和名词有没有所属关系，没有代表地点，有代表事物。</p><ol><li>限定性和非限定性定语从句<br>a. I like Ku, who is young. 非限定性定语从句 不是主要   翻译为：我喜欢小酷，他很年轻。<br>b. I like Ku who is young.   限定性定语从句。全部主要   翻译为：我喜欢年轻的小酷。</li><li>特殊应用（非限定性定语从句下）which/as 可以用来修饰整一件事（一句话），其中which修饰的只能放在后面，as修饰可以放在前面和后面。<br>You are a wonderful person, which/as we all know.</li></ol><p>形容词可以作表语、定语、名词、宾语补足语（She makes me happy happy为宾语补足语），形容词都是为了服务名词。  </p><p><a id="orgc887c33"></a></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li>我喜欢做运动。<br>I like doing sports such as playing football, playing basketball and swimming.</li><li>小明的爸爸是一名医生，大家都很尊敬他。<br>Ming frather is a doctor experienced as well as amiable, and therefore, everyone respects him.<br>小明的爸爸是一位大家都很尊敬的医生。<br>Ming frather is a doctor who/whom everyone respects.</li><li>这就是我们想要成为志愿者的原因。<br>This is the reason why we want to become volunteers.</li><li>辛勤的农民工们离开家乡去城市的原因是他们需要养活他们爱着的家庭。<br>The reason why the diligent rural labors leave their hometown for the city is that they need to support their families that/which they love</li><li>这个穿着红色裙子的女孩告诉了我们一个消息：他们的城市有很多人参加了这场比赛。<br>The girl who is in red tells us the message, there are a multitude of peoples in their city taking part in this game.</li></ol><p>疑问： 什么时候用they are 什么时候用they。 什么时候用a 什么时候用 the</p><p><a id="org0abe884"></a></p><h2 id="定语高分应用"><a href="#定语高分应用" class="headerlink" title="定语高分应用"></a>定语高分应用</h2><ol><li>我们应该保护动物</li></ol><p>We should protect animals<br>在写作中凡是遇到复数名词都可以在后面加上 , such as 引出三个小类别（或多个），用and链接。<br>We should protect animals, such as dogs, cats and birds.</p><ol><li>我喜欢猫</li></ol><p>I like my cat.<br>I have a passion for my cat<br>like = have a passion for<br>当在写作中遇到单数名词，都可以在后面加上两个形容词用 as well as 链接起来，注意需要一致，比如都是好的或者都是坏的。<br>I have a passion for my cat, clever as well as adorable/cute.</p><p><a id="org5a6563a"></a></p><h1 id="状语及其运用"><a href="#状语及其运用" class="headerlink" title="状语及其运用"></a>状语及其运用</h1><p><a id="org055b115"></a></p><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>复词（adv）无论做什么都和名词没有关系，复词作状语，也就是说状语和名词没有关系。<br>状语就是除了不可以修饰名词，其他都可以修饰。</p><ol><li>什么可以做状语<br>复词：she is very beautiful. very 为复词<br>非谓语动词： I study hard to pass the exam.<br>介词短语： I read books in the morning. in the morning 为介词短语<br>状语从句： I like you because you are beautiful.</li><li>状语在句子中放在什么位置<br>状语在句子中任意放用逗号隔开。<br>I read books, on a daily basis.<br>On a daily basis, i read books.<br>I, on a daily basis, read books.<br>I read, on a daily basis, books.</li><li>状语的分类<ol><li>时间<br>I run every day.</li><li>地点<br>I run in the park.</li><li>结果<br>I am too tired to run. too &amp;#x2026; to &amp;#x2026; 太过于怎么样了以至于无法怎么样。</li><li>目的<br>I run in order to keep healthy.</li><li>条件<br>I can run without you.</li><li>让步（虽然，即使）<br>In spite of the difficulties, I run every day.</li><li>方式<br>I go to work on foot.</li><li>比较<br>I am more beautiful than you.</li><li>原因<br>Your mother blame you for your carelessjess.</li><li>程度<br>We thank you very much.</li><li>伴随<br>I run with my sister.</li><li>方面<br>I am poor in my English.</li></ol></li></ol><p><a id="org987ed88"></a></p><h1 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h1><p><a id="org85c355c"></a></p><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><ol><li><p>状语从句引导词<br>状语从句引导词是根据引导词的意思而定的<br>I like you, because you are gorgeous.<br>When I walked in the street, I saw my teacher.<br>Although you failed the examination, I admire you.</p></li><li><p>状语从句位置<br>状语从句可放前也可放后，但是放前，句子中间逗号必须要加。</p></li><li><p>时间状语从句<br>引导词：when, while, as soon as, before, after, once, as, since, every time, until</p></li><li><p>目的状语从句<br>引导词：so that, in order that<br>不定式（跟动词原形）不加句子：to do, in order to, so as to</p><p>我努力学习就是为了通过考试<br>I study hard to pass the examination.<br>I study hard in order that i can pass the exam.<br>两者可以互换前提是主句从句主语一致</p><p>我努力通过考试，爸爸就会给我买一台新电脑<br>I try to pass the examination, so that my frather can buy me a new computer.</p></li><li><p>结果状语从句<br>引导词：so that, so..(形容词)..that&amp;#x2026;, such&amp;#x2026;（名词）&amp;#x2026;that&amp;#x2026;</p><p>你很漂亮，我喜欢你<br>You are beautiful so that i like you.<br>You are so beautiful that i like you.<br>You are such a beautiful girl that i like you. a beautiful girl （形容词加上名词）</p><p>我赢得了比赛，让我爸爸很开心。<br>I win the game so that I can make my frather happy.<br>I win the game so thar I make my frather happy. 有情态动词就是还没完成 so that 表示为这样，没有时 so that 表示为因此</p><p>too 形容词 to &amp;#x2026;do. 太过于什么以至于无法干啥<br>He is too arrogant to get along well with us.</p></li><li><p>条件状语从句<br>引导词：if, unless（除非）, as(so) long as（只要）,providing(supposing) that, provided.<br>If/as(so) long as/ you confess your fault, we are still good friends.<br>Unless you confess you fault, we are not good friends. （不需要or）</p></li><li><p>让步状语从句<br>引导词：though,although,even if,even though 都是虽然即使的意思  不能和but连用。<br>你是个好人<br>You are a good person, although I fail to like you.  fail to 无法</p><p>He is a terrible man, although he has passed the exam.</p></li><li><p>方式状语从句<br>引导词：as, as if, as though, the way (仿佛，好像)</p><p>The teacher talks with me as if she is-&gt;were my mother. （虚拟语气没有was）</p></li><li><p>比较状语从句<br>引导词：than（比较）, as&amp;#x2026;as&amp;#x2026;（ 同样）<br>The old man is robust<br>The old man is more robust than a young man.</p><p>The old man is as robust as a young man. 这个老人和年轻人一样强壮。</p><p>你比我漂亮<br>You are more beautiful than I/me.</p></li></ol><p><a id="org20de8d4"></a></p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ol><li><p>当我打扫房间的时候，我妈妈正在厨房做饭。<br>When I was cleaning the room, My monther was cooking in the kitchen.</p></li><li><p>活泼又可爱的鸟儿一边飞一边歌唱，这让我无比快乐。<br>Birds vigorous as well as cute fly as they sing, which makes me very happy.</p></li><li><p>有人的地方就有矛盾，这些矛盾可以促进我们的进步。 -&gt; 有人的地方就有可以促进我们进步的矛盾<br>Where there are people, there are contradictions, which can promote our progress./which play a key role in our development.</p></li><li><p>实际上，他直到你完成作业才离开。<br>Actually, He waited until you are finished your homework.<br>Actually, He did not leave until you are finished you homework;</p></li><li><p>当我在看电视的时候，我收到了你的消息。<br>When watching TV, I received your message. （过去式）<br>When (I am) watching TV, I receive you message.</p></li></ol><p><a id="orge1b4e82"></a></p><h1 id="五大标点符号"><a href="#五大标点符号" class="headerlink" title="五大标点符号"></a>五大标点符号</h1><p>对英语翻译有影响的：逗号 冒号 分号 破折号 括号</p><ol><li><p>逗号<br>英语中的逗号“,”表示句子的停顿，同类成分的分隔，与汉语不同，英语中的逗号不能表示一句话的结束。<br>I like animals, such as cats, dogs and birds.</p></li><li><p>冒号<br>英语中的冒号“:”用法较多，可以</p><ol><li>用来介绍或解释前面的内容；</li><li>用于直接引语前；</li><li>用于名单或列表前</li></ol><p>共三不做重点考查。<br>In order to take this exam, I bought four items: a bag, a pen, an eraser and a ruler.</p></li><li><p>分号<br>英语中的分号“;”用来分隔并列的句子，类似于and。<br>The man is first duty will then be to his wife; the wife is first duty will be to her husband.</p></li><li><p>破折号<br>英语中的破折号“-”用于解释说明或概括（常见）<br>Americans, she finds, buy roughly 20 billion garments a yeat - about 64 items per person - and no matter how much they give away, this excess leads to waste.</p></li><li><p>括号<br>英语中的括号“()”用于附加解释说明或补充。<br>The measures would tell women (and many men) that they should not abandon their families.</p></li></ol><p><a id="orgb91d660"></a></p><h1 id="句子分析方法"><a href="#句子分析方法" class="headerlink" title="句子分析方法"></a>句子分析方法</h1><p>目的<br>解决长难句的翻译问题，以提炼出句子核心。<br>难点：</p><ol><li><p>复杂谓语的翻译</p><ol><li>This room has been being cleaned by jack, since his mother asked him to do so.<br>Jack 打扫了房间，因为他妈妈要求他这么做。</li><li>Those scientists will be launching the rocket on time so that they are bound to be highly praised.<br>科学家会按时发射火箭，这样他们会受到人们的赞赏。</li></ol></li><li><p>多个动词的翻译<br>一个句子中出现多个动词，是常见的翻译障碍。<br>如何辨别谓语和非谓语动词</p><ol><li>Getting out of the habit of sleeping during the evening, you will be healthier.<br>如果你能够改掉傍晚睡觉的毛病，你会更健康。 谓语 will be</li></ol></li><li><p>宾语从句/表语从句</p></li><li><p>定语从句</p></li><li><p>状语从句</p></li><li><p>介词短语</p></li></ol><p><a id="orgcf447ed"></a></p><h1 id="教材"><a href="#教材" class="headerlink" title="教材"></a>教材</h1><p><a id="orgb8fd0a7"></a></p><h2 id="Chapter-1-Unit-1-Dialogue-1"><a href="#Chapter-1-Unit-1-Dialogue-1" class="headerlink" title="Chapter 1 Unit 1 Dialogue 1"></a>Chapter 1 Unit 1 Dialogue 1</h2><ol><li>语法<br>show sb sth; show sth to sb. 展示给某人什么东西。<br>brings out 拿出,生产 bring sb out 使某人很开心<br>in + 颜色 代表穿着什么颜色的衣服。<br>next to<br>  贴近 靠近 I stand next to you.<br>  除了。 Next to swimming I like playing basketball. 除了游泳，我还喜欢打篮球<br>be angry with/at<br>go on business 去出差。<br>插入语  I say/think/remember.<br>great aunt  爷爷的兄弟姐妹。<br>out of date 过时的。<br>Skinny 非常瘦，皮包骨。<br>You can tell == You can see.<br>It is adj + for sb to do 做某事对某人是什么样的。 It is fun for us to be with him 和他相处很有趣。<br>be similar to 和什么相似<br>ought to 应该<br>enjoy doing 很喜欢很享受某事</li></ol><p><a id="org30daa05"></a></p><h2 id="Chapter-1-Unit-1-Dialogue-2"><a href="#Chapter-1-Unit-1-Dialogue-2" class="headerlink" title="Chapter 1 Unit 1 Dialogue 2"></a>Chapter 1 Unit 1 Dialogue 2</h2><p>go on vacation 假期，去度假<br>mental 心理的，精神的<br>depend 依赖依靠 dependability 可靠性，可信任<br>A talk with B about/for sth. 表示关于什么事A和B进行交谈<br>talk to 我和你说话 主动性更强<br>It is time for sb to do sth. 某人应该做某事<br>be are going to 应该去干某事<br>according to/ on the basic of 根据<br>competency/competence 能力<br>enable sb to do 使得某人能做某事<br>used to do sth 曾经做过某事<br>be used to do 用来做什么<br>be used to doing sth 习惯于做某事</p><p><a id="org621e6ff"></a></p><h2 id="Chapter-1-Unit-1-Dialogue-3"><a href="#Chapter-1-Unit-1-Dialogue-3" class="headerlink" title="Chapter 1 Unit 1 Dialogue 3"></a>Chapter 1 Unit 1 Dialogue 3</h2><p>shoplifter n. 扒手；商店窃贼<br>well-dressed adj. 衣冠楚楚的；穿着考究的<br>clerk n. 办事员，店员</p><p><a id="orgdc35424"></a></p><h2 id="Chapter-1-Unit-1-Dialogue-4"><a href="#Chapter-1-Unit-1-Dialogue-4" class="headerlink" title="Chapter 1 Unit 1 Dialogue 4"></a>Chapter 1 Unit 1 Dialogue 4</h2><p>science and technology 科技<br>seem v. 似乎 可以作系动词。 You seem beautiful.<br>splash v. （液体）飞溅。<br>hollow adj.空洞的</p><p><a id="org9180703"></a></p><h2 id="Chapter-1-Unit-1-Passage"><a href="#Chapter-1-Unit-1-Passage" class="headerlink" title="Chapter 1 Unit 1 Passage"></a>Chapter 1 Unit 1 Passage</h2><p>circumstance n. 条件；情况<br>You seem to take great pride in your daughter.<br>She is such a successful manager.<br>Yes, She is wonderful daughter.<br>But I’m pround of her beacuse of her  even more</p><p>I ran into David Preston downtown today.<br>Really, Did he say anything about hist sister<br>She should be leaving Loshag very soon.<br>because her husband has taken a job in Alaska.</p><p>professor seems serious.<br>But he lectures are quite humorous, aren’t they?</p><p><a id="orgc1357a9"></a></p><h2 id="Chapter-1-Unit-2-Dialogue-1"><a href="#Chapter-1-Unit-2-Dialogue-1" class="headerlink" title="Chapter 1 Unit 2 Dialogue 1"></a>Chapter 1 Unit 2 Dialogue 1</h2><p><a id="org590ebd0"></a></p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><p>实际上，在经理的帮助下，我已经完成了任务。<br>As a matter of fact/in fact, with the help of my manager, I have finshed the task.</p><p>作为青少年，我们应该怀有伟大的梦想，同时，我们将用我们的努力去开创美好的未来。<br>As teenagers, We should cherish great dreams. At the same time, We will carve out our bright future with our efforts.</p><p>毕竟，在同事当中，我只和小明相处得来。<br>After all, among out colleagues, I can only get along well with Ming.</p><p>面对这些他们不得不客服的困难，他们似乎很沮丧。<br>Facing/Faced with/In the face of these difficulties that they have to overcome, they seem very depressed.</p><p>因为没有人会去考虑他们的想法，所以没有人知道他们俩之间的秘密。<br>No one consider/takes they are thought into account/consideration, and for this reason, nobody knows the secret between them.</p><p>我最爱的是牛排，她最爱的是烤羊腿<br>My favorite is/ turns out to be/ steak, whereas her favorite is/proves baked leg of lamb.</p><p>因为很难做出选择，他们找我要一些建议。<br>Sine it is hard to make a pick, they ask me for some suggestions.<br>It is so hard to make a pick that they ask me for some advice.</p><p>尽管我们一直拒绝，经理还是建议我们喝葡萄酒。<br>[Although/ Even if] we always refuse drinking, the manager still suggests us drinking white wine.<br>Despite the fact that we always refuse drinking, the manager still suggests us drinking white wine.<br>Despite out refusal, the manager advises us to drink white wine.</p><p>一个期待着美好生活的人应该竭尽全力为目标而奋斗。<br>One person who look forward to a wonderful life, should spare no effort to struggle/fight for his or her destination.</p><p><a id="org05f5fe3"></a></p><h1 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h1><ol><li><p>Can I have a menu please? here you are sir. a few minutes later.<br>Are you ready to order now sir? Yes, I would like a big bowl of beef noodles, please.<br>No problem, I will be right back with you food.</p></li><li><p>I’m have many hobbies. To began with, I like sports.<br>I’m good at playing basketball.<br>My friend Daviod is also good at playing basketball, so we often play basketball games together.<br>In addition to supports, I play many musical instruments including the piano and drums.<br>Taking up these hobbies makes me happy every day.</p></li><li><p>You don’t look very well, petter. What’s wrong?<br>I don’t know marry, When I woke up this morning, I stared sneeze and cough. I also have a headache.<br>Obviously you have caught a cold. you need to ask for sick leave, and see your doctor immediately.<br>Thanks for you advice, I will.</p></li><li><p>Marry, will you do me favor.<br>I’m busy painting a material. Will you wait a moment.<br>Well, what do you want me to do?<br>Will you call Mr.Roy? Tell hime tomorrow afternoon’s meeting is canceled.<br>Ok, I’ll see to it.<br>After that, can you come to my office?<br>I want to talk about the report you handed in last week.<br>Sure, I will.<br>Another favor, will you book two tickets for the concert tonight?<br>when?<br>Anytime after work. One last favor, are you free tonight? Will you go the concert with my wife?</p></li><li><p>What do you want to be in the future.<br>I want to be a doctor.<br>Why do you want to be a doctor?<br>Because I want to save people’s lives.<br>Now what do you want to be when you graduate from college.<br>I want to be an English teacher.<br>This way, I can teach many children to speak and write English.</p></li><li><p>Hi, Everybody. My name is David Wang.<br>I come from Guangxi, I’m 24 years old.<br>I’m a computer engineer, I plan to study abroad in the future. Thank you very much.</p></li><li><p>What are you going to do this evening, Honey?<br>How about eating out for a change?<br>Sounds like a good idea.<br>I hear there is an Italian restaurant around the corner. It’s newly opened.<br>Good, Let’s go there and give it a try.</p></li><li><p>Good morning, Mama. May I help you<br>Yes, please.<br>I’d like open a savings acccount.<br>Will you tell me how to do it?<br>Sure Ma’ma.<br>We have now two kinds of savings account for our customers.<br>Namely the current deposit account and the fixed deposit account.<br>What kind would you like to open?<br>Could you tell me the difference between the two?<br>Yes, of course.<br>The interest rate is higher for fixed account,<br>but you cannot draw cash from the deposit before the maturity date or you won’t own the interest as planned.<br>Then I’d open a current deposit account.<br>Please fll in the slip and go to Account No.4 for service.<br>Use your real name, please.<br>Thank you very much.<br>You are welcome.<br>Or you going to erappply<br>I’d open a<br>Please<br>use you real name please<br>thank you very much<br>you are welcome.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Education </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pets3 Education </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS中编译dotnet/runtime源代码</title>
      <link href="/2022/11/16/build-dotnet-runtime-for-macos/"/>
      <url>/2022/11/16/build-dotnet-runtime-for-macos/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>闲来无事，本着好奇心想一探dotnet底层Socket是如何工作的，在github上下载源代码后，本着测试运行心态去调试一波。<br>直接运行<code>dotnet build</code>命令发现报错，后来搜索一番才发现编译不简单。因此，将整个过程进行记录，以备后续参考。<br>以下操作都是在macos上完成的。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>这部分参考官方文档即可（<a href="https://github.com/dotnet/runtime/blob/main/docs/workflow/requirements/macos-requirements.md">MacOS下编译需要的环境</a>） 里面也有Window的介绍，大家也可以参考进行环境准备。</p><p>大致过程：安装XCode以及Toolchain Setup</p><ol><li>在AppStore中安装<a href="https://apps.apple.com/us/app/xcode/id497799835">XCode</a></li><li>执行以下命令<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 选择xcode.app   </span><span class="token function">sudo</span> xcode-select <span class="token parameter variable">--switch</span> /Applications/Xcode.app/Contents/Developer   <span class="token comment"># cd 到runtime项目根目录</span><span class="token builtin class-name">cd</span> /path/to/runtime<span class="token comment"># 安装依赖包 CMake(3.15.5 or newer) icu4c openssl@(1.1 or 3) pkg-config python3 ninja</span>brew bundle --no-lock <span class="token parameter variable">--file</span> eng/Brewfile </code></pre></li></ol><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>安装完后直接执行<code>./build.sh</code>即可。（PS：墙裂建议挂代理，GFW问题真的让人头大）<br>注意：安装过多个版本SDK可能会有以下冲突问题</p><pre class="language-bash" data-language="bash"><code class="language-bash">清单“wasm-tools”<span class="token punctuation">[</span>microsoft.net.workload.mono.toolchain<span class="token punctuation">]</span> 中的工作负载定义“/usr/local/share/dotnet/sdk-manifests/7.0.100/microsoft.net.workload.mono.toolchain/WorkloadManifest.json”与清单“microsoft.net.workload.mono.toolchain.net7”<span class="token punctuation">[</span>/usr/local/share/dotnet/sdk-manifests/7.0.100/microsoft.net.workload.mono.toolchain.net7/WorkloadManifest.json<span class="token punctuation">]</span> 冲突</code></pre><p>出现上述问题，卸载掉相同版本的preview即可，如还未解决，直接卸载掉所有版本重新安装即可。</p>]]></content>
      
      
      <categories>
          
          <category> dotnet/runtime </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 变量</title>
      <link href="/2022/09/03/rust-variables/"/>
      <url>/2022/09/03/rust-variables/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Rust 变量默认是无法改变的。这是Rust推动的特点之一，这样可以利用Rust提供的安全、易并发的方式来编写代码。不过我们也可以选择让变量可变。</p><p>当变量不可变时，一旦将值绑定到变量上，就无法更改该值。例如以下示例</p><p>首先创建一个项目 variables </p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> new variables</code></pre><p>在 variables 文件夹中找到文件 src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>保存后运行命令 <code>cargo run</code>。会得到以下报错信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cargo</span> run   Compiling variables v0.1.0 <span class="token punctuation">(</span>/Users/binwan/Documents/binwan-dev/rust-hello/variables<span class="token punctuation">)</span>error<span class="token punctuation">[</span>E0384<span class="token punctuation">]</span>: cannot assign twice to immutable variable <span class="token variable"><span class="token variable">`</span>x<span class="token variable">`</span></span> --<span class="token operator">&gt;</span> src/main.rs:4:2  <span class="token operator">|</span><span class="token number">2</span> <span class="token operator">|</span>     <span class="token builtin class-name">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token operator">|</span>         -  <span class="token operator">|</span>         <span class="token operator">|</span>  <span class="token operator">|</span>         first assignment to <span class="token variable"><span class="token variable">`</span>x<span class="token variable">`</span></span>  <span class="token operator">|</span>         help: consider making this binding mutable: <span class="token variable"><span class="token variable">`</span>mut x<span class="token variable">`</span></span><span class="token number">3</span> <span class="token operator">|</span>     println<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: {}"</span>, x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span> <span class="token operator">|</span>     x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token operator">|</span>     ^^^^^ cannot assign twice to immutable variableFor <span class="token function">more</span> information about this error, try <span class="token variable"><span class="token variable">`</span>rustc <span class="token parameter variable">--explain</span> E0384<span class="token variable">`</span></span><span class="token builtin class-name">.</span>error: could not compile <span class="token variable"><span class="token variable">`</span>variables<span class="token variable">`</span></span> due to previous error</code></pre><p><code>cannot assign twice to immutable variable 'x'</code> 指示变量x不能被分配两次。<br>当我们尝试在代码中更改一个不可更改的值时，编译器将会提示错误，我们必须重视这个错误。如果代码的一部分假设某个值永远不会更改，而代码的另一部分更改该值，则代码的第一部分可能无法执行其设计的操作。这种错误很难在事后跟踪，特别是第二段代码更改该值时。</p><p>可变形有时也是非常有用的，可以使代码编写起来更方便。Rust中可以通过添加 <code>mut</code> 在变量名称前面。添加该指示代码后变量将可以被更改。<br>例如以下示例：</p><p>在文件 <code>src/main.rs</code> 中：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行代码 <code>cargo run</code> 后输出以下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cargo</span> run   Compiling variables v0.1.0 <span class="token punctuation">(</span>/Users/binwan/Documents/binwan-dev/rust-hello/variables<span class="token punctuation">)</span>    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.14s     Running <span class="token variable"><span class="token variable">`</span>target/debug/variables<span class="token variable">`</span></span>The value of x is: <span class="token number">5</span>The value of x is: <span class="token number">6</span></code></pre><p>在使用更改值时，通常有许多因素需要考虑。例如，在使用大型数据结构时，使用 <code>mut</code> 就地更改要比复制和返回新实例更快。对于较小的数据结构，创建新实例并以更具函数式的编程风格编写可能更容易思考。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>和变量相似，常量也是声明后无法更改，但是它们之间又有一些不同。<br>常量是任何情况下都不能更改的，可以使用 <code>const</code> 代码声明一个常量，同时常量需要指定数据类型（例如：u32 等）。<br>常量只能设置为常量表达式，不能设置为运行时计算的结果。<br>例如：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">const</span> <span class="token constant">THREE_HOURS_IN_SECONDS</span><span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h2 id="重影（shadowing）"><a href="#重影（shadowing）" class="headerlink" title="重影（shadowing）"></a>重影（shadowing）</h2><p>变量重影可以申明一个同名的变量，并将前一变量的值重影。并且在作用域不同的情况下，可以局部重影。使用关键字 <code>let</code> 。<br>示例：src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is the inner scope is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: {}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行命令 <code>cargo run</code> 输出如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cargo</span> run   Compiling variables v0.1.0 <span class="token punctuation">(</span>/Users/binwan/Documents/binwan-dev/rust-hello/variables<span class="token punctuation">)</span>    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.12s     Running <span class="token variable"><span class="token variable">`</span>target/debug/variables<span class="token variable">`</span></span>The value of x is the inner scope is: <span class="token number">12</span>The value of x is: <span class="token number">6</span></code></pre><p>可以看出在局部作用域的重影变量并没有改变全局的重影，这说明重影作用范围是可以局部的。<br>重影和变量标记不同，重影是可以更改变量类型的，而<code>mut</code>只能改变值但不能更改类型。<br>例如：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> spaces <span class="token operator">=</span> <span class="token string">"     "</span><span class="token punctuation">;</span><span class="token keyword">let</span> spaces <span class="token operator">=</span> spaces<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是被允许的。<br>当我们使用<code>mut</code> 时：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> spaces <span class="token operator">=</span> <span class="token string">"      "</span><span class="token punctuation">;</span>spaces <span class="token operator">=</span> spaces<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行后会出现<code>mismatched types</code>错误。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cargo</span> run   Compiling variables v0.1.0 <span class="token punctuation">(</span>file:///projects/variables<span class="token punctuation">)</span>error<span class="token punctuation">[</span>E0308<span class="token punctuation">]</span>: mismatched types --<span class="token operator">&gt;</span> src/main.rs:3:14  <span class="token operator">|</span><span class="token number">3</span> <span class="token operator">|</span>     spaces <span class="token operator">=</span> spaces.len<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">|</span>              ^^^^^^^^^^^^ expected <span class="token variable"><span class="token variable">`</span><span class="token operator">&amp;</span>str<span class="token variable">`</span></span>, found <span class="token variable"><span class="token variable">`</span>usize<span class="token variable">`</span></span>For <span class="token function">more</span> information about this error, try <span class="token variable"><span class="token variable">`</span>rustc <span class="token parameter variable">--explain</span> E0308<span class="token variable">`</span></span><span class="token builtin class-name">.</span>error: could not compile <span class="token variable"><span class="token variable">`</span>variables<span class="token variable">`</span></span> due to previous error</code></pre><p><a href="https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing">官方原文</a></p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rust 命令行参数</title>
      <link href="/2022/09/02/rust-args/"/>
      <url>/2022/09/02/rust-args/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/rust-lang/book/blob/main/src/ch12-01-accepting-command-line-arguments.md">官方文档 Args</a></p><p>创建一个控制台项目</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> new minigrep<span class="token builtin class-name">cd</span> minigrep</code></pre><p>minigrep 能够接受两个命令行参数：文件名和要搜索的字符串。也就是说我们希望能够使用 cargo run、要搜索的字符串和被搜索的文件的路径来运行程序，像这样：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run searchstring example-filename.txt</code></pre><p>读取参数值<br>为了确保 minigrep 能够获取传递给它的命令行参数的值，我们需要一个 Rust 标准库提供的函数，也就是 std::env::args。这个函数返回一个传递给程序的命令行参数的 迭代器（iterator）。我们会在 第十三章 全面的介绍它们。但是现在只需理解迭代器的两个细节：迭代器生成一系列的值，可以在迭代器上调用 collect 方法将其转换为一个集合，比如包含所有迭代器产生元素的 vector。</p><p>使用示例 12-1 中的代码来读取任何传递给 minigrep 的命令行参数并将其收集到一个 vector 中。</p><p>文件名: src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{:?}"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>示例 12-1：将命令行参数收集到一个 vector 中并打印出来</p><p>首先使用 use 语句来将 std::env 模块引入作用域以便可以使用它的 args 函数。注意 std::env::args 函数被嵌套进了两层模块中。正如 第七章 讲到的，当所需函数嵌套了多于一层模块时，通常将父模块引入作用域，而不是其自身。这便于我们利用 std::env 中的其他函数。这比增加了 use std::env::args; 后仅仅使用 args 调用函数要更明确一些，因为 args 容易被错认成一个定义于当前模块的函数。</p><blockquote><p><strong>NOTE</strong><br>args 函数和无效的 Unicode<br>注意 std::env::args 在其任何参数包含无效 Unicode 字符时会 panic。如果你需要接受包含无效 Unicode 字符的参数，使用 std::env::args_os 代替。这个函数返回 OsString 值而不是 String 值。这里出于简单考虑使用了 std::env::args，因为 OsString 值每个平台都不一样而且比 String 值处理起来更为复杂。’</p></blockquote><p>在 main 函数的第一行，我们调用了 env::args，并立即使用 collect 来创建了一个包含迭代器所有值的 vector。collect 可以被用来创建很多类型的集合，所以这里显式注明 args 的类型来指定我们需要一个字符串 vector。虽然在 Rust 中我们很少会需要注明类型，然而 collect 是一个经常需要注明类型的函数，因为 Rust 不能推断出你想要什么类型的集合。</p><p>最后，我们使用调试格式 :? 打印出 vector。让我们尝试分别用两种方式（不包含参数和包含参数）运行代码：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run   Compiling minigrep v0.1.0 <span class="token punctuation">(</span>file:///projects/minigrep<span class="token punctuation">)</span>    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.61s     Running <span class="token variable"><span class="token variable">`</span>target/debug/minigrep<span class="token variable">`</span></span><span class="token punctuation">[</span><span class="token string">"target/debug/minigrep"</span><span class="token punctuation">]</span><span class="token function">cargo</span> run needle haystack   Compiling minigrep v0.1.0 <span class="token punctuation">(</span>file:///projects/minigrep<span class="token punctuation">)</span>    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">1</span>.57s     Running <span class="token variable"><span class="token variable">`</span>target/debug/minigrep needle haystack<span class="token variable">`</span></span><span class="token punctuation">[</span><span class="token string">"target/debug/minigrep"</span>, <span class="token string">"needle"</span>, <span class="token string">"haystack"</span><span class="token punctuation">]</span></code></pre><p>注意 vector 的第一个值是 “target/debug/minigrep”，它是我们二进制文件的名称。这与 C 中的参数列表的行为相匹配，让程序使用在执行时调用它们的名称。如果要在消息中打印它或者根据用于调用程序的命令行别名更改程序的行为，通常可以方便地访问程序名称，不过考虑到本章的目的，我们将忽略它并只保存所需的两个参数。</p><p>将参数值保存进变量<br>打印出参数 vector 中的值展示了程序可以访问指定为命令行参数的值。现在需要将这两个参数的值保存进变量这样就可以在程序的余下部分使用这些值了。让我们如示例 12-2 这样做：</p><p>文件名: src/main.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>env<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token namespace">env<span class="token punctuation">::</span></span><span class="token function">args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token operator">&amp;</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token operator">&amp;</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Searching for {}"</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"In file {}"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>示例 12-2：创建变量来存放查询参数和文件名参数</p><p>正如之前打印出 vector 时所所看到的，程序的名称占据了 vector 的第一个值 args[0]，所以我们从索引 1 开始。minigrep 获取的第一个参数是需要搜索的字符串，所以将其将第一个参数的引用存放在变量 query 中。第二个参数将是文件名，所以将第二个参数的引用放入变量 filename 中。</p><p>我们将临时打印出这些变量的值来证明代码如我们期望的那样工作。使用参数 test 和 sample.txt 再次运行这个程序：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> run <span class="token builtin class-name">test</span> sample.txt   Compiling minigrep v0.1.0 <span class="token punctuation">(</span>file:///projects/minigrep<span class="token punctuation">)</span>    Finished dev <span class="token punctuation">[</span>unoptimized + debuginfo<span class="token punctuation">]</span> target<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token number">0</span>.0s     Running <span class="token variable"><span class="token variable">`</span>target/debug/minigrep <span class="token builtin class-name">test</span> sample.txt<span class="token variable">`</span></span>Searching <span class="token keyword">for</span> <span class="token builtin class-name">test</span>In <span class="token function">file</span> sample.txt</code></pre><p>好的，它可以工作！我们将所需的参数值保存进了对应的变量中。之后会增加一些错误处理来应对类似用户没有提供参数的情况，不过现在我们将忽略他们并开始增加读取文件功能。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安装 Emacs (Emacs Port 版本)</title>
      <link href="/2022/08/17/emacs-port-install/"/>
      <url>/2022/08/17/emacs-port-install/</url>
      
        <content type="html"><![CDATA[<p>这是 Mac 系统下的一个分发版本，具有适配Mac的功能。<br>安装步骤</p><pre class="language-bash" data-language="bash"><code class="language-bash">brew tap railwaycat/emacsmacportbrew <span class="token function">install</span> emacs-mac brew <span class="token function">install</span> emacs-mac --with-natural-title-bar <span class="token comment"># 状态栏透明（Emacs 29版本不需要）</span><span class="token comment"># disable tap</span>brew untap railwaycat/emacsmacport</code></pre><p>透明设置</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#透明效果默认不开启，若要开启：</span>defaults <span class="token function">write</span> org.gnu.Emacs TransparentTitleBar DARK<span class="token comment">#或</span>defaults <span class="token function">write</span> org.gnu.Emacs TransparentTitleBar LIGHT<span class="token comment">#若要禁用透明效果：</span>defaults <span class="token function">write</span> org.gnu.Emacs TransparentTitleBar NO<span class="token comment">#若要隐藏标题栏上的文档图标：</span>defaults <span class="token function">write</span> org.gnu.Emacs HideDocumentIcon YES</code></pre><p>参考链接</p><ol><li><a href="https://github.com/railwaycat/homebrew-emacsmacport">Emacs Port Homebrew 安装</a></li><li><a href="https://emacs-china.org/t/topic/2596">状态栏透明</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Emacs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 打包神器 -- Nuitka</title>
      <link href="/2022/08/02/python-nuitka/"/>
      <url>/2022/08/02/python-nuitka/</url>
      
        <content type="html"><![CDATA[<h2 id="一-pyinstaller和Nuitka使用感受"><a href="#一-pyinstaller和Nuitka使用感受" class="headerlink" title="一. pyinstaller和Nuitka使用感受"></a>一. pyinstaller和Nuitka使用感受</h2><h3 id="1-1-使用需求"><a href="#1-1-使用需求" class="headerlink" title="1.1 使用需求"></a>1.1 使用需求</h3><p>这2个工具同时都能满足项目的需要：</p><ul><li>隐藏源码。这里的pyinstaller是通过设置key来对源码进行加密的；而nuitka则是将python源码转成C++（这里得到的是二进制的pyd文件，防止了反编译），然后再编译成可执行文件。</li><li>方便移植。用户使用方便，不用再安装什么python啊，第三方包之类的。</li></ul><h3 id="1-2-使用感受"><a href="#1-2-使用感受" class="headerlink" title="1.2 使用感受"></a>1.2 使用感受</h3><p>2个工具使用后的最大的感受就是：</p><ul><li>pyinstaller体验很差！<ul><li>一个深度学习的项目最后转成的exe竟然有近3个G的大小（pyinstaller是将整个运行环境进行打包），对，你没听错，一个EXE有3个G！</li><li>打包超级慢，启动超级慢。</li></ul></li></ul><ul><li>nuitka真香！<ul><li>同一个项目，生成的exe只有7M！</li><li>打包超级快（1min以内），启动超级快。</li></ul></li></ul><h2 id="二-Nuitka的安装及使用"><a href="#二-Nuitka的安装及使用" class="headerlink" title="二. Nuitka的安装及使用"></a>二. Nuitka的安装及使用</h2><h3 id="2-1-nuitka的安装"><a href="#2-1-nuitka的安装" class="headerlink" title="2.1 nuitka的安装"></a>2.1 nuitka的安装</h3><ul><li>直接利用pip即可安装：<code>pip install Nuitka</code></li><li>下载vs2019(MSVS)或者MinGW64，反正都是C++的编译器，随便下。</li></ul><h3 id="2-2-使用过程"><a href="#2-2-使用过程" class="headerlink" title="2.2 使用过程"></a>2.2 使用过程</h3><p>对于第三方依赖包较多的项目（比如需要import torch,tensorflow,cv2,numpy,pandas,geopy等等）而言，这里最好打包的方式是只将属于自己的代码转成C++，不管这些大型的第三方包！<br>以下是我demo的一个目录结构（这里使用了pytq5框架写的界面）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">├─utils//源码1文件夹├─src//源码2文件夹├─logo.ico//demo的图标└─demo.py//main文件</code></pre><p>使用以下命令（调试）直接生成exe文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">nuitka <span class="token parameter variable">--standalone</span> --show-memory --show-progress --nofollow-imports --plugin-enable<span class="token operator">=</span>qt-plugins --follow-import-to<span class="token operator">=</span>utils,src --output-dir<span class="token operator">=</span>out --windows-icon-from-ico<span class="token operator">=</span>./logo.ico demo.py</code></pre><p>这里简单介绍下我上面的nuitka的命令：</p><ul><li>–standalone：方便移植到其他机器，不用再安装python</li><li>–show-memory –show-progress：展示整个安装的进度过程</li><li>–nofollow-imports：不编译代码中所有的import，比如keras，numpy之类的。</li><li>–plugin-enable=qt-plugins：我这里用到pyqt5来做界面的，这里nuitka有其对应的插件。</li><li>–follow-import-to=utils,src：需要编译成C++代码的指定的2个包含源码的文件夹，这里用,来进行分隔。</li><li>–output-dir=out：指定输出的结果路径为out。</li><li>–windows-icon-from-ico=./logo.ico：指定生成的exe的图标为logo.ico这个图标，这里推荐一个将图片转成ico格式文件的网站（比特虫）。</li><li>–windows-disable-console：运行exe取消弹框。这里没有放上去是因为我们还需要调试，可能哪里还有问题之类的。</li></ul><p>经过1min的编译之后，你就能在你的目录下看到：</p><pre class="language-bash" data-language="bash"><code class="language-bash">├─utils//源码1文件夹├─src//源码2文件夹├─out//生成的exe文件夹      ├─demo.build      └─demo.dist              └─demo.exe//生成的exe文件├─logo.ico//demo的图标└─demo.py//main文件</code></pre><p>当然这里你会发现真正运行exe的时候，会报错：<font color="red">no module named torch,cv2,tensorflow</font> 等等这些没有转成C++的第三方包。<br>这里需要找到这些包（我的是在software\python3.7\Lib\site-packages下）复制（比如numpy,cv2这个文件夹）到<font color="red">demo.dist</font>路径下。<br>至此，exe能完美运行啦！</p><p>转载信息：<br>作者：李小肥<br>来源：<a href="https://www.lixiaofei2yy.website/">https://www.lixiaofei2yy.website</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>K8S 手动续期证书</title>
      <link href="/2022/07/20/k8s-cert-renew/"/>
      <url>/2022/07/20/k8s-cert-renew/</url>
      
        <content type="html"><![CDATA[<p>使用 kubeadm 安装 kubernetes 集群非常方便，但是也有一个比较烦人的问题就是默认的证书有效期只有一年时间，所以需要考虑证书升级的问题，本文的演示集群版本为 v1.18.18 版本，不保证下面的操作对其他版本也适用，在操作之前一定要先对证书目录进行备份，防止操作错误进行回滚。本文主要介绍两种方式来更新集群证书。</p><h2 id="手动更新证书"><a href="#手动更新证书" class="headerlink" title="手动更新证书"></a>手动更新证书</h2><p>由 kubeadm 生成的客户端证书默认只有一年有效期，我们可以通过 <code>check-expiration</code> 命令来检查证书是否过期：  </p><pre class="language-bash" data-language="bash"><code class="language-bash">$ kubeadm alpha certs check-expiration<span class="token punctuation">[</span>check-expiration<span class="token punctuation">]</span> Reading configuration from the cluster<span class="token punctuation">..</span>.<span class="token punctuation">[</span>check-expiration<span class="token punctuation">]</span> FYI: You can <span class="token function">look</span> at this config <span class="token function">file</span> with <span class="token string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span>CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGEDadmin.conf                 Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:51 UTC   364d                                    noapiserver                  Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:53 UTC   364d            ca                      noapiserver-etcd-client      Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:53 UTC   364d            etcd-ca                 noapiserver-kubelet-client   Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:53 UTC   364d            ca                      nocontroller-manager.conf    Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:51 UTC   364d                                    noetcd-healthcheck-client    Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:45 UTC   364d            etcd-ca                 noetcd-peer                  Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:45 UTC   364d            etcd-ca                 noetcd-server                Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:45 UTC   364d            etcd-ca                 nofront-proxy-client         Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:53 UTC   364d            front-proxy-ca          noscheduler.conf             Apr <span class="token number">24</span>, <span class="token number">2023</span> 02:51 UTC   364d                                    noCERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGEDca                      Apr <span class="token number">20</span>, <span class="token number">2031</span> <span class="token number">10</span>:49 UTC   8y              noetcd-ca                 Apr <span class="token number">20</span>, <span class="token number">2031</span> <span class="token number">10</span>:49 UTC   8y              nofront-proxy-ca          Apr <span class="token number">20</span>, <span class="token number">2031</span> <span class="token number">10</span>:49 UTC   8y              no</code></pre><p>该命令显示 /etc/kubernetes/pki 文件夹中的客户端证书以及 kubeadm 使用的 KUBECONFIG 文件中嵌入的客户端证书的到期时间/剩余时间。</p><blockquote><p><strong>NOTE</strong><br>kubeadm 不能管理由外部 CA 签名的证书，如果是外部得证书，需要自己手动去管理证书的更新。</p></blockquote><p>另外需要说明的是上面的列表中没有包含 kubelet.conf，因为 kubeadm 将 kubelet 配置为自动更新证书。</p><p>另外 kubeadm 会在控制面板升级的时候自动更新所有证书，所以使用 kubeadm 搭建得集群最佳的做法是经常升级集群，这样可以确保你的集群保持最新状态并保持合理的安全性。但是对于实际的生产环境我们可能并不会去频繁得升级集群，所以这个时候我们就需要去手动更新证书。</p><p>要手动更新证书也非常方便，我们只需要通过 kubeadm alpha certs renew 命令即可更新你的证书，这个命令用 CA（或者 front-proxy-CA ）证书和存储在 /etc/kubernetes/pki 中的密钥执行更新。</p><blockquote><p><strong>NOTE</strong><br>如果是高可用集群，需要在所有Master节点上都要执行。</p></blockquote><h3 id="更新证书"><a href="#更新证书" class="headerlink" title="更新证书"></a>更新证书</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认地址为 /etc/kubernetes，使用时请注意替换为自己的kubenetes地址。</span><span class="token comment"># 备份证书</span>$ <span class="token function">mkdir</span> /etc/kubernetes.bak $ <span class="token function">cp</span> <span class="token parameter variable">-r</span> /etc/kubernetes/pki/ /etc/kubernetes.bak$ <span class="token function">cp</span> /etc/kubernetes/*.conf /etc/kubernetes.bak<span class="token comment"># 备份 etcd 数据目录</span>$ <span class="token function">cp</span> <span class="token parameter variable">-r</span> /var/lib/etcd /var/lib/etcd.bak<span class="token comment"># 执行更新证书的命令</span>$ kubeadm alpha certs renew all <span class="token parameter variable">--config</span><span class="token operator">=</span><span class="token punctuation">{</span>kubeadm.yaml<span class="token punctuation">}</span> <span class="token comment"># kubeadm.yaml 记得替换</span><span class="token comment"># 更新下 kubeconfig 文件</span>$ kubeadm init phase kubeconfig all <span class="token parameter variable">--config</span> <span class="token punctuation">{</span>kubeadm.yaml<span class="token punctuation">}</span> <span class="token comment"># kubeadm.yaml 记得替换</span><span class="token comment"># 替换 admin 配置文件</span>$ <span class="token function">mv</span> <span class="token environment constant">$HOME</span>/.kube/config <span class="token environment constant">$HOME</span>/.kube/config.old$ <span class="token function">cp</span> <span class="token parameter variable">-i</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config$ <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span class="token comment"># 重启 kube-apiserver、kube-controller、kube-scheduler、etcd 这4个容器. </span>$ <span class="token function">docker</span> restart <span class="token punctuation">{</span>apiserver_container<span class="token punctuation">}</span>$ <span class="token function">docker</span> restart <span class="token punctuation">{</span>controller_container<span class="token punctuation">}</span>$ <span class="token function">docker</span> restart <span class="token punctuation">{</span>scheduler_container<span class="token punctuation">}</span>$ <span class="token function">docker</span> restart <span class="token punctuation">{</span>etcd_container<span class="token punctuation">}</span></code></pre><blockquote><p><strong>NOTE</strong><br>以上命令需要在所有 Master 节点上运行。</p></blockquote><p>以上命令即可完成手动更新，使用一下命令来验证证书更新。</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token operator">|</span> openssl s_client <span class="token parameter variable">-showcerts</span> <span class="token parameter variable">-connect</span> <span class="token number">127.0</span>.0.1:6443 <span class="token parameter variable">-servername</span> api <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> openssl x509 <span class="token parameter variable">-noout</span> <span class="token parameter variable">-enddate</span><span class="token assign-left variable">notAfter</span><span class="token operator">=</span>Apr <span class="token number">24</span> 02:53:20 <span class="token number">2023</span> GMT</code></pre><p>可以看到现在的有效期是一年过后的，证明已经更新成功了。</p>]]></content>
      
      
      <categories>
          
          <category> Kubenetes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>K8S docker迁移到containerd</title>
      <link href="/2022/07/20/k8s-docker-to-containerd/"/>
      <url>/2022/07/20/k8s-docker-to-containerd/</url>
      
        <content type="html"><![CDATA[<p>由于 kubernetes 从1.24.0版本开始默认禁止使用docker，所以想要升级到1.24.0需要从docker迁移到containerd。</p><p>整个升级步骤总共分为：</p><ol><li>安装并配置containerd；</li><li>排空节点服务，停止并移除docker服务（不是必须），停止kubelet服务；</li><li>配置kubelet使用containerd作为容器运行时；</li><li>重启kubelet服务并验证节点；</li></ol><h4 id="1-安装并配置containerd"><a href="#1-安装并配置containerd" class="headerlink" title="1. 安装并配置containerd"></a>1. 安装并配置containerd</h4><p>由于docker也已切换到containerd上，可以直接参考官方docker安装教程。<br>此处参考docker安装即可，查看 <a href="https://docs.docker.com/engine/install/centos">https://docs.docker.com/engine/install/centos</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/containerdcontainerd config default <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/containerd/config.toml<span class="token comment"># 配置SystemCgroup以及 pause 为中国源</span><span class="token function">vim</span> /etc/containerd/config.toml<span class="token comment"># 查找 [plugins."io.containerd.grpc.v1.cri".cni]</span><span class="token comment"># 更改 SystemdCgroup = false 为 true</span><span class="token comment"># 查找 sandbox_image 并修改 sandbox_image = "registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6" （此处可以修改为私有源）</span>systemctl restart containerdsystemctl <span class="token builtin class-name">enable</span> containerd</code></pre><h4 id="2-排空节点服务停止服务"><a href="#2-排空节点服务停止服务" class="headerlink" title="2. 排空节点服务停止服务"></a>2. 排空节点服务停止服务</h4><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl drain <span class="token operator">&lt;</span>node-name<span class="token operator">&gt;</span> --ignore-daemonsetssystemctl stop kubeletsystemctl stop docker.servicesystemctl disbale docker.service<span class="token punctuation">(</span>不是必须<span class="token punctuation">)</span></code></pre><h4 id="3-配置kubelet使用containerd作为容器运行时"><a href="#3-配置kubelet使用containerd作为容器运行时" class="headerlink" title="3. 配置kubelet使用containerd作为容器运行时"></a>3. 配置kubelet使用containerd作为容器运行时</h4><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl edit no <span class="token operator">&lt;</span>node-name<span class="token operator">&gt;</span><span class="token comment"># 这一命令会打开一个文本编辑器，供你在其中编辑 Node 对象。 要选择不同的文本编辑器，你可以设置 KUBE_EDITOR 环境变量。</span><span class="token comment"># 更改 kubeadm.alpha.kubernetes.io/cri-socket 值，将其从 /var/run/dockershim.sock 改为你所选择的 CRI 套接字路径 （例如：unix:///run/containerd/containerd.sock）。</span><span class="token comment"># 注意新的 CRI 套接字路径必须带有 unix:// 前缀。</span><span class="token comment"># 保存文本编辑器中所作的修改，这会更新 Node 对象。</span><span class="token comment"># 编辑文件 /var/lib/kubelet/kubeadm-flags.env，将 containerd 运行时添加到标志中： --container-runtime=remote 和 --container-runtime-endpoint=unix:///run/containerd/containerd.sock"。</span>systemctl restart kubelet</code></pre><h4 id="4-验证节点"><a href="#4-验证节点" class="headerlink" title="4. 验证节点"></a>4. 验证节点</h4><p>输出如下面所示。CONTAINER-RUNTIME 列给出容器运行时及其版本。</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl get nodes <span class="token parameter variable">-o</span> wide</code></pre>]]></content>
      
      
      <categories>
          
          <category> Kubenetes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>K8S 集群更新</title>
      <link href="/2022/07/20/k8s-upgrade/"/>
      <url>/2022/07/20/k8s-upgrade/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍使用 kubeadm 来对 kubernetes 进行升级更新。<br>大致步骤如下：</p><h3 id="1-查找并下载新版本"><a href="#1-查找并下载新版本" class="headerlink" title="1. 查找并下载新版本"></a>1. 查找并下载新版本</h3><p>控制节点和工作节点都需要执行</p><blockquote><p><strong>NOTE</strong><br>注意：需要更新的版本和当前版本不能跳级，必须迭代升级。例如当前版本 1.17.x，只可以下载更新 1.18.x，不可以直接更新到 1.19.x 以及之后版本。</p></blockquote><h4 id="ubuntu-debian-系"><a href="#ubuntu-debian-系" class="headerlink" title="ubuntu debian 系"></a>ubuntu debian 系</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> update<span class="token function">apt-cache</span> madison kubeadm<span class="token comment"># 在列表中查找最新的 1.24 版本</span><span class="token comment"># 它看起来应该是 1.24.x-00，其中 x 是最新的补丁版本</span><span class="token comment"># 用新的补丁版本替换 1.24.x-00 中的 x</span>apt-mark unhold kubelet kubectl kubeadm <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token assign-left variable">kubelet</span><span class="token operator">=</span><span class="token number">1.24</span>.x-00 <span class="token assign-left variable">kubectl</span><span class="token operator">=</span><span class="token number">1.24</span>.x-00  <span class="token assign-left variable">kubeadm</span><span class="token operator">=</span><span class="token number">1.24</span>.x-00 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>apt-mark hold kubelet kubectl kubeadm</code></pre><h4 id="centos-RHEL-Fedora"><a href="#centos-RHEL-Fedora" class="headerlink" title="centos RHEL Fedora"></a>centos RHEL Fedora</h4><pre class="language-bash" data-language="bash"><code class="language-bash">yum list <span class="token parameter variable">--showduplicates</span> kubeadm <span class="token parameter variable">--disableexcludes</span><span class="token operator">=</span>kubernetes<span class="token comment"># 在列表中查找最新的 1.24 版本</span><span class="token comment"># 它看起来应该是 1.24.x-00，其中 x 是最新的补丁版本</span><span class="token comment"># 用新的补丁版本号替换 1.24.x-00 中的 x</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kubelet-1.24.x-0 kubectl-1.24.x-0 kubeadm-1.24.x-0 <span class="token parameter variable">--disableexcludes</span><span class="token operator">=</span>kubernetes</code></pre><h3 id="2-升级-kubernetes"><a href="#2-升级-kubernetes" class="headerlink" title="2. 升级 kubernetes"></a>2. 升级 kubernetes</h3><p>有需要可以排空节点，此步骤不是必须。</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubectl drain <span class="token operator">&lt;</span>node-to-drain<span class="token operator">&gt;</span> --ignore-daemonsets</code></pre><blockquote><p><strong>NOTE</strong><br>升级分为控制节点和其他控制节点和工作节点升级，二者升级步骤不同，请注意！</p></blockquote><h4 id="具有-x2F-etc-x2F-kubernetes-x2F-admin-conf-的控制节点执行"><a href="#具有-x2F-etc-x2F-kubernetes-x2F-admin-conf-的控制节点执行" class="headerlink" title="具有 /etc/kubernetes/admin.conf 的控制节点执行"></a>具有 /etc/kubernetes/admin.conf 的控制节点执行</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看升级几乎</span>kubeadm upgrade plan<span class="token comment"># 如有提示需要手动更新的，则需要进行手动更新。</span>kubeadm upgrade apply v1.24.x<span class="token comment"># 执行后看到如下输出则视为升级成功</span><span class="token punctuation">[</span>upgrade/successful<span class="token punctuation">]</span> SUCCESS<span class="token operator">!</span> Your cluster was upgraded to <span class="token string">"v1.24.x"</span><span class="token builtin class-name">.</span> Enjoy<span class="token operator">!</span><span class="token comment"># 执行重启kubelet</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart kubelet</code></pre><h3 id="其他控制节点以及工作节点执行"><a href="#其他控制节点以及工作节点执行" class="headerlink" title="其他控制节点以及工作节点执行"></a>其他控制节点以及工作节点执行</h3><p>其他节点直接执行 kubeadm upgrade node 即可，无需查看升级计划以及Apply</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm upgrade <span class="token function">node</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart kubelet</code></pre><p>升级完成，可以运行 kubectl get node 查看容器版本。</p>]]></content>
      
      
      <categories>
          
          <category> Kubenetes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 kubeadm 安装 kubernetes 集群</title>
      <link href="/2022/05/12/kubeadm-k8s-install/"/>
      <url>/2022/05/12/kubeadm-k8s-install/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍如何通过kubeadm安装一个高可用kubernetes集群。</p><h3 id="1-检查并设置主机环境"><a href="#1-检查并设置主机环境" class="headerlink" title="1. 检查并设置主机环境"></a>1. 检查并设置主机环境</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭 swap （这一步必须要执行）</span><span class="token function">sudo</span> swapoff <span class="token parameter variable">-a</span><span class="token comment"># 查看 swap 分区情况</span><span class="token function">sudo</span> <span class="token function">free</span> <span class="token parameter variable">-m</span><span class="token comment"># 永久关闭 swap</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/fstab<span class="token comment"># 在swap分区这行前加 # 禁用掉，保存退出</span><span class="token comment"># 修改机器名称来唯一标识机器地址</span><span class="token function">sudo</span> hostnamectl set-hostname <span class="token operator">&lt;</span>node-name<span class="token operator">&gt;</span><span class="token comment"># 检查 br_netfilter</span>lsmod <span class="token operator">|</span> <span class="token function">grep</span> br_netfilter <span class="token comment"># 检查是否输出有 br_netfilter</span><span class="token comment"># 如果没有输出执行以下命令</span><span class="token function">sudo</span> modprobe br_netfilter<span class="token comment"># 允许 iptables 检查流量</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules-load.d/k8s.conf</span>br_netfilterEOF</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/k8s.conf</span>net.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF</span><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">--system</span></code></pre><h3 id="2-安装容器运行时"><a href="#2-安装容器运行时" class="headerlink" title="2. 安装容器运行时"></a>2. 安装容器运行时</h3><p>容器运行时有 Docker、Contrainerd 等多种，本文只描述 Docker、Contrainerd 安装。<br> PS：Kubernetes 从 1.24.0 版本开始不在接受默认docker运行时，需要安装docker-shim，故推荐切换到Contrainerd运行时。另外，Docker从1.20.0版本开始底层已经依赖于Contrainerd运行时。</p><p>a. 安装 Docker 参考链接 <a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p>b. 安装 Containerd 安装方法参考 <a href="https://github.com/containerd/containerd">https://github.com/containerd/containerd</a><br>安装完成后执行下述命令配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/containerdcontainerd config default <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/containerd/config.toml<span class="token comment"># 配置SystemCgroup以及 pause 为中国源</span><span class="token function">vim</span> /etc/containerd/config.toml<span class="token comment"># 查找 [plugins."io.containerd.grpc.v1.cri".cni]</span><span class="token comment"># 更改 SystemdCgroup = false 为 true</span><span class="token comment"># 查找 sandbox_image 并修改 sandbox_image = "registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6" （此处可以修改为私有源）</span>systemctl restart containerdsystemctl <span class="token builtin class-name">enable</span> containerd<span class="token comment">#如果机器上还有docker </span>systemctl disable docker.service</code></pre><h3 id="3-安装kubeadm、kubectl、kubelet"><a href="#3-安装kubeadm、kubectl、kubelet" class="headerlink" title="3. 安装kubeadm、kubectl、kubelet"></a>3. 安装kubeadm、kubectl、kubelet</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">######## yum 安装 ########</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/yum.repos.d/kubernetes.repo</span>[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg         https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgkeepcache = 0EOF</span><span class="token function">sudo</span> yum list <span class="token parameter variable">--showduplicates</span> kubeadm <span class="token parameter variable">--disableexcludes</span><span class="token operator">=</span>kubernetes <span class="token comment"># 查看需要安装的版本（推荐安装比最新版本低两个次版本）</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> kubeadm-<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> kubectl-<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span> kubelet-<span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token comment"># 添加环境变量 kubectl</span><span class="token builtin class-name">echo</span> <span class="token string">"export KUBECONFIG=/etc/kubernetes/admin.conf"</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc</code></pre><h3 id="4-安装第一个控制节点"><a href="#4-安装第一个控制节点" class="headerlink" title="4. 安装第一个控制节点"></a>4. 安装第一个控制节点</h3><p>生成 kubeadm-config</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> ./kubeadm-config.yaml</span>apiVersion: kubeadm.k8s.io/v1beta3kind: InitConfigurationnodeRegistration:  criSocket: &lt;container-sock&gt;  imagePullPolicy: IfNotPresent---apiVersion: kubeadm.k8s.io/v1beta3certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: {}dns: {}etcd:  local:    dataDir: /var/lib/etcdimageRepository: registry.cn-hangzhou.aliyuncs.com/google_containerskind: ClusterConfigurationkubernetesVersion: &lt;kubernetes-version&gt;controlPlaneEndpoint: "&lt;loadbalancer-address&gt;:&lt;port&gt;"networking:  dnsDomain: cluster.local  podSubnet: ""  serviceSubnet: 10.96.0.0/12scheduler: {}EOF</span></code></pre><p>a. 需要修改 <container-sock> docker运行时位置：/var/run/docker.sock  containerd运行时位置：/var/run/containerd/containerd.sock<br>b. 需要修改 <kubernetes-version> 也就是刚才安装的kubeadm 版本。<br>c. 需要修改 <loadbalancer-address>:<port> kubectl链接控制kubernetes集群的地址。（推荐使用域名，解析到所有master节点上）</port></loadbalancer-address></kubernetes-version></container-sock></p><p>执行kuberadm init 初始化集群</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm init <span class="token parameter variable">--config</span> ./kubeadm-config.yaml --upload-certs <span class="token comment"># upload-certs 自动上传集群证书到各个节点</span><span class="token comment"># 执行完之后会输出</span><span class="token operator">&gt;</span> kubeadm <span class="token function">join</span> <span class="token operator">&lt;</span>loadbalancer-address<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token parameter variable">--token</span> <span class="token operator">&lt;</span>token<span class="token operator">&gt;</span> --discovery-token-ca-cert-hash sha256:<span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span> <span class="token punctuation">\</span><span class="token operator">&gt;</span>--control-plane --certificate-key <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span><span class="token operator">&gt;</span> Please note that the certificate-key gives access to cluster sensitive data, keep it secret<span class="token operator">!</span><span class="token operator">&gt;</span> As a safeguard, uploaded-certs will be deleted <span class="token keyword">in</span> two hours<span class="token punctuation">;</span> If necessary, you can use<span class="token operator">&gt;</span> <span class="token string">"kubeadm init phase upload-certs --upload-certs"</span> to reload certs afterward.<span class="token operator">&gt;</span> Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:<span class="token operator">&gt;</span> kubeadm <span class="token function">join</span> <span class="token operator">&lt;</span>loadbalancer-address<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token parameter variable">--token</span> <span class="token operator">&lt;</span>token<span class="token operator">&gt;</span> --discovery-token-ca-cert-hash sha256:<span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span></code></pre><p>后续work和master节点加入按照输出的token和证书key相应加入。</p><h3 id="5-安装第二个或多个控制节点"><a href="#5-安装第二个或多个控制节点" class="headerlink" title="5. 安装第二个或多个控制节点"></a>5. 安装第二个或多个控制节点</h3><p>依次执行 步骤 1-3 所有命令。<br>执行kubeadm join</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token operator">&lt;</span>loadbalancer-address<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token parameter variable">--token</span> <span class="token operator">&lt;</span>token<span class="token operator">&gt;</span> --discovery-token-ca-cert-hash sha256:<span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span> --control-plane --certificate-key <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span></code></pre><blockquote><p><strong>WARNING</strong><br>注意 Token 默认只有24小时有效<br>若失效点击此处查看<a href="/2022/06/02/kubeadm-used/">生成token、cert-hash、certificate-key</a></p></blockquote><h3 id="6-安装work节点"><a href="#6-安装work节点" class="headerlink" title="6. 安装work节点"></a>6. 安装work节点</h3><p>依次执行 步骤 1-3 所有命令。<br>执行kubeadm join</p><pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm <span class="token function">join</span> <span class="token operator">&lt;</span>loadbalancer-address<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token parameter variable">--token</span> <span class="token operator">&lt;</span>token<span class="token operator">&gt;</span> --discovery-token-ca-cert-hash sha256:<span class="token operator">&lt;</span>hash<span class="token operator">&gt;</span></code></pre><blockquote><p><strong>WARNING</strong><br>注意 Token 默认只有24小时有效<br>若失效点击此处查看<a href="/2022/06/02/kubeadm-used/">生成token、cert-hash、certificate-key</a></p></blockquote><p>至此一个高可用的kubernetes集群已经安装完成，尽情享受（折腾）吧！</p>]]></content>
      
      
      <categories>
          
          <category> Kubenetes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubeadm 基本使用</title>
      <link href="/2022/05/12/kubeadm-used/"/>
      <url>/2022/05/12/kubeadm-used/</url>
      
        <content type="html"><![CDATA[<h1 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h1><ol><li>查看有效Token列表<pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm token list</code></pre></li><li>生成 Join 集群 Token<pre class="language-bash" data-language="bash"><code class="language-bash">kubadm token create --print-join-command  <span class="token comment"># 默认有效期24小时,若想久一些可以结合–ttl参数,设为0则用不过期</span></code></pre></li></ol><h1 id="Cert"><a href="#Cert" class="headerlink" title="Cert"></a>Cert</h1><ol><li>生成 cert-hash<pre class="language-bash" data-language="bash"><code class="language-bash">openssl x509 <span class="token parameter variable">-pubkey</span> <span class="token parameter variable">-in</span> /etc/kubernetes/pki/ca.crt <span class="token operator">|</span> openssl rsa <span class="token parameter variable">-pubin</span> <span class="token parameter variable">-outform</span> der <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> openssl dgst <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-hex</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^.* //'</span></code></pre></li><li>查看 certificate-key <pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm certs certificate-key</code></pre></li><li>刷新 certificate-key <pre class="language-bash" data-language="bash"><code class="language-bash">kubeadm init phase upload-certs --upload-certs</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Kubenetes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Guys</title>
      <link href="/2022/01/17/hello/"/>
      <url>/2022/01/17/hello/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://wanbin.tech/">My-Blog</a>!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
